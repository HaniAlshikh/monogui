// @generated by protobuf-ts 2.8.2
// @generated from protobuf file "eventsourcing/commands/command.proto" (package "commands", syntax proto3)
// tslint:disable
//
// Copyright 2022 Monoskope Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MESSAGE_TYPE } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { Any } from "../../google/protobuf/any";
/**
 * Command is a command to be executed by the CommandHandler
 *
 * @generated from protobuf message commands.Command
 */
export interface Command {
    /**
     * Unique identifier of the aggregate the command applies to (UUID 128-bit
     * number)
     *
     * @generated from protobuf field: string id = 1;
     */
    id: string;
    /**
     * Type of the command
     *
     * @generated from protobuf field: string type = 2;
     */
    type: string;
    /**
     * Command type specific data
     *
     * @generated from protobuf field: google.protobuf.Any data = 3;
     */
    data?: Any;
}
/**
 * @generated from protobuf message commands.TestCommandData
 */
export interface TestCommandData {
    /**
     * @generated from protobuf field: string test = 1;
     */
    test: string;
    /**
     * @generated from protobuf field: int32 test_count = 2;
     */
    testCount: number;
}
// @generated message type with reflection information, may provide speed optimized methods
class Command$Type extends MessageType<Command> {
    constructor() {
        super("commands.Command", [
            { no: 1, name: "id", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "validate.rules": { string: { uuid: true } } } },
            { no: 2, name: "type", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "validate.rules": { string: { maxBytes: "60", pattern: "^[a-zA-Z][A-Za-z0-9_-]+$" } } } },
            { no: 3, name: "data", kind: "message", T: () => Any }
        ]);
    }
    create(value?: PartialMessage<Command>): Command {
        const message = { id: "", type: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<Command>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Command): Command {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string id */ 1:
                    message.id = reader.string();
                    break;
                case /* string type */ 2:
                    message.type = reader.string();
                    break;
                case /* google.protobuf.Any data */ 3:
                    message.data = Any.internalBinaryRead(reader, reader.uint32(), options, message.data);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Command, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string id = 1; */
        if (message.id !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.id);
        /* string type = 2; */
        if (message.type !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.type);
        /* google.protobuf.Any data = 3; */
        if (message.data)
            Any.internalBinaryWrite(message.data, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message commands.Command
 */
export const Command = new Command$Type();
// @generated message type with reflection information, may provide speed optimized methods
class TestCommandData$Type extends MessageType<TestCommandData> {
    constructor() {
        super("commands.TestCommandData", [
            { no: 1, name: "test", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "test_count", kind: "scalar", T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<TestCommandData>): TestCommandData {
        const message = { test: "", testCount: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<TestCommandData>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: TestCommandData): TestCommandData {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string test */ 1:
                    message.test = reader.string();
                    break;
                case /* int32 test_count */ 2:
                    message.testCount = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: TestCommandData, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string test = 1; */
        if (message.test !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.test);
        /* int32 test_count = 2; */
        if (message.testCount !== 0)
            writer.tag(2, WireType.Varint).int32(message.testCount);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message commands.TestCommandData
 */
export const TestCommandData = new TestCommandData$Type();
