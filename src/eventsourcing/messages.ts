// @generated by protobuf-ts 2.8.2
// @generated from protobuf file "eventsourcing/messages.proto" (package "eventsourcing", syntax proto3)
// tslint:disable
//
// Copyright 2022 Monoskope Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MESSAGE_TYPE } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { StringValue } from "../google/protobuf/wrappers";
import { UInt64Value } from "../google/protobuf/wrappers";
import { Timestamp } from "../google/protobuf/timestamp";
/**
 * Event describes anything that has happened in the system.
 * An event type name should be in past tense and contain the intent
 * (TenantUpdated). The event should contain all the data needed when
 * applying/handling it.
 * The combination of aggregate_type, aggregate_id and version is
 * unique.
 *
 * @generated from protobuf message eventsourcing.Event
 */
export interface Event {
    /**
     * Type of the event
     *
     * @generated from protobuf field: string type = 1;
     */
    type: string;
    /**
     * Timestamp of when the event was created
     *
     * @generated from protobuf field: google.protobuf.Timestamp timestamp = 2;
     */
    timestamp?: Timestamp;
    /**
     * ID of the aggregate that the event should be applied to (UUID 128-bit
     * number)
     *
     * @generated from protobuf field: string aggregate_id = 3;
     */
    aggregateId: string;
    /**
     * Type of the aggregate that the event can be applied to
     *
     * @generated from protobuf field: string aggregate_type = 4;
     */
    aggregateType: string;
    /**
     * Strict monotone counter, per aggregate/aggregate_id relation
     *
     * @generated from protobuf field: google.protobuf.UInt64Value aggregate_version = 5;
     */
    aggregateVersion?: UInt64Value;
    /**
     * Event type specific event data
     *
     * @generated from protobuf field: bytes data = 6;
     */
    data: Uint8Array;
    /**
     * Event meta data
     *
     * @generated from protobuf field: map<string, string> metadata = 7;
     */
    metadata: {
        [key: string]: string;
    };
}
/**
 * Request to get Events from to the store
 *
 * @generated from protobuf message eventsourcing.EventFilter
 */
export interface EventFilter {
    /**
     * Filter events by aggregate_id
     *
     * @generated from protobuf field: google.protobuf.StringValue aggregate_id = 1;
     */
    aggregateId?: StringValue;
    /**
     * Filter events for a specific aggregate type
     *
     * @generated from protobuf field: google.protobuf.StringValue aggregate_type = 2;
     */
    aggregateType?: StringValue;
    /**
     * Filter events with a version >= min_version
     *
     * @generated from protobuf field: google.protobuf.UInt64Value min_version = 3;
     */
    minVersion?: UInt64Value;
    /**
     * Filter events with a version <= max_version
     *
     * @generated from protobuf field: google.protobuf.UInt64Value max_version = 4;
     */
    maxVersion?: UInt64Value;
    /**
     * Filter events with a timestamp >= min_timestamp
     *
     * @generated from protobuf field: google.protobuf.Timestamp min_timestamp = 7;
     */
    minTimestamp?: Timestamp;
    /**
     * Filter events with a timestamp <= max_timestamp
     *
     * @generated from protobuf field: google.protobuf.Timestamp max_timestamp = 8;
     */
    maxTimestamp?: Timestamp;
}
/**
 * Request to get Events from to the store by using multiple filters
 *
 * @generated from protobuf message eventsourcing.EventFilters
 */
export interface EventFilters {
    /**
     * @generated from protobuf field: repeated eventsourcing.EventFilter filters = 1;
     */
    filters: EventFilter[];
}
// @generated message type with reflection information, may provide speed optimized methods
class Event$Type extends MessageType<Event> {
    constructor() {
        super("eventsourcing.Event", [
            { no: 1, name: "type", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "validate.rules": { string: { maxBytes: "60", pattern: "^[a-zA-Z][A-Za-z0-9_-]+$" } } } },
            { no: 2, name: "timestamp", kind: "message", T: () => Timestamp },
            { no: 3, name: "aggregate_id", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "validate.rules": { string: { uuid: true } } } },
            { no: 4, name: "aggregate_type", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "validate.rules": { string: { maxBytes: "60", pattern: "^[a-zA-Z][A-Za-z0-9_-]+$" } } } },
            { no: 5, name: "aggregate_version", kind: "message", T: () => UInt64Value },
            { no: 6, name: "data", kind: "scalar", T: 12 /*ScalarType.BYTES*/ },
            { no: 7, name: "metadata", kind: "map", K: 9 /*ScalarType.STRING*/, V: { kind: "scalar", T: 9 /*ScalarType.STRING*/ } }
        ]);
    }
    create(value?: PartialMessage<Event>): Event {
        const message = { type: "", aggregateId: "", aggregateType: "", data: new Uint8Array(0), metadata: {} };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<Event>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Event): Event {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string type */ 1:
                    message.type = reader.string();
                    break;
                case /* google.protobuf.Timestamp timestamp */ 2:
                    message.timestamp = Timestamp.internalBinaryRead(reader, reader.uint32(), options, message.timestamp);
                    break;
                case /* string aggregate_id */ 3:
                    message.aggregateId = reader.string();
                    break;
                case /* string aggregate_type */ 4:
                    message.aggregateType = reader.string();
                    break;
                case /* google.protobuf.UInt64Value aggregate_version */ 5:
                    message.aggregateVersion = UInt64Value.internalBinaryRead(reader, reader.uint32(), options, message.aggregateVersion);
                    break;
                case /* bytes data */ 6:
                    message.data = reader.bytes();
                    break;
                case /* map<string, string> metadata */ 7:
                    this.binaryReadMap7(message.metadata, reader, options);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    private binaryReadMap7(map: Event["metadata"], reader: IBinaryReader, options: BinaryReadOptions): void {
        let len = reader.uint32(), end = reader.pos + len, key: keyof Event["metadata"] | undefined, val: Event["metadata"][any] | undefined;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case 1:
                    key = reader.string();
                    break;
                case 2:
                    val = reader.string();
                    break;
                default: throw new globalThis.Error("unknown map entry field for field eventsourcing.Event.metadata");
            }
        }
        map[key ?? ""] = val ?? "";
    }
    internalBinaryWrite(message: Event, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string type = 1; */
        if (message.type !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.type);
        /* google.protobuf.Timestamp timestamp = 2; */
        if (message.timestamp)
            Timestamp.internalBinaryWrite(message.timestamp, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* string aggregate_id = 3; */
        if (message.aggregateId !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.aggregateId);
        /* string aggregate_type = 4; */
        if (message.aggregateType !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.aggregateType);
        /* google.protobuf.UInt64Value aggregate_version = 5; */
        if (message.aggregateVersion)
            UInt64Value.internalBinaryWrite(message.aggregateVersion, writer.tag(5, WireType.LengthDelimited).fork(), options).join();
        /* bytes data = 6; */
        if (message.data.length)
            writer.tag(6, WireType.LengthDelimited).bytes(message.data);
        /* map<string, string> metadata = 7; */
        for (let k of Object.keys(message.metadata))
            writer.tag(7, WireType.LengthDelimited).fork().tag(1, WireType.LengthDelimited).string(k).tag(2, WireType.LengthDelimited).string(message.metadata[k]).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message eventsourcing.Event
 */
export const Event = new Event$Type();
// @generated message type with reflection information, may provide speed optimized methods
class EventFilter$Type extends MessageType<EventFilter> {
    constructor() {
        super("eventsourcing.EventFilter", [
            { no: 1, name: "aggregate_id", kind: "message", T: () => StringValue, options: { "validate.rules": { string: { uuid: true } } } },
            { no: 2, name: "aggregate_type", kind: "message", T: () => StringValue, options: { "validate.rules": { string: { maxBytes: "60", pattern: "^[a-zA-Z][A-Za-z0-9_-]+$" } } } },
            { no: 3, name: "min_version", kind: "message", T: () => UInt64Value },
            { no: 4, name: "max_version", kind: "message", T: () => UInt64Value },
            { no: 7, name: "min_timestamp", kind: "message", T: () => Timestamp },
            { no: 8, name: "max_timestamp", kind: "message", T: () => Timestamp }
        ]);
    }
    create(value?: PartialMessage<EventFilter>): EventFilter {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<EventFilter>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: EventFilter): EventFilter {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* google.protobuf.StringValue aggregate_id */ 1:
                    message.aggregateId = StringValue.internalBinaryRead(reader, reader.uint32(), options, message.aggregateId);
                    break;
                case /* google.protobuf.StringValue aggregate_type */ 2:
                    message.aggregateType = StringValue.internalBinaryRead(reader, reader.uint32(), options, message.aggregateType);
                    break;
                case /* google.protobuf.UInt64Value min_version */ 3:
                    message.minVersion = UInt64Value.internalBinaryRead(reader, reader.uint32(), options, message.minVersion);
                    break;
                case /* google.protobuf.UInt64Value max_version */ 4:
                    message.maxVersion = UInt64Value.internalBinaryRead(reader, reader.uint32(), options, message.maxVersion);
                    break;
                case /* google.protobuf.Timestamp min_timestamp */ 7:
                    message.minTimestamp = Timestamp.internalBinaryRead(reader, reader.uint32(), options, message.minTimestamp);
                    break;
                case /* google.protobuf.Timestamp max_timestamp */ 8:
                    message.maxTimestamp = Timestamp.internalBinaryRead(reader, reader.uint32(), options, message.maxTimestamp);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: EventFilter, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* google.protobuf.StringValue aggregate_id = 1; */
        if (message.aggregateId)
            StringValue.internalBinaryWrite(message.aggregateId, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* google.protobuf.StringValue aggregate_type = 2; */
        if (message.aggregateType)
            StringValue.internalBinaryWrite(message.aggregateType, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* google.protobuf.UInt64Value min_version = 3; */
        if (message.minVersion)
            UInt64Value.internalBinaryWrite(message.minVersion, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* google.protobuf.UInt64Value max_version = 4; */
        if (message.maxVersion)
            UInt64Value.internalBinaryWrite(message.maxVersion, writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        /* google.protobuf.Timestamp min_timestamp = 7; */
        if (message.minTimestamp)
            Timestamp.internalBinaryWrite(message.minTimestamp, writer.tag(7, WireType.LengthDelimited).fork(), options).join();
        /* google.protobuf.Timestamp max_timestamp = 8; */
        if (message.maxTimestamp)
            Timestamp.internalBinaryWrite(message.maxTimestamp, writer.tag(8, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message eventsourcing.EventFilter
 */
export const EventFilter = new EventFilter$Type();
// @generated message type with reflection information, may provide speed optimized methods
class EventFilters$Type extends MessageType<EventFilters> {
    constructor() {
        super("eventsourcing.EventFilters", [
            { no: 1, name: "filters", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => EventFilter }
        ]);
    }
    create(value?: PartialMessage<EventFilters>): EventFilters {
        const message = { filters: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<EventFilters>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: EventFilters): EventFilters {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated eventsourcing.EventFilter filters */ 1:
                    message.filters.push(EventFilter.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: EventFilters, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated eventsourcing.EventFilter filters = 1; */
        for (let i = 0; i < message.filters.length; i++)
            EventFilter.internalBinaryWrite(message.filters[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message eventsourcing.EventFilters
 */
export const EventFilters = new EventFilters$Type();
