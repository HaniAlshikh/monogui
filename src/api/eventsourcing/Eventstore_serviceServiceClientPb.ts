/**
 * @fileoverview gRPC-Web generated client stub for eventsourcing
 * @enhanceable
 * @public
 */

// Code generated by protoc-gen-grpc-web. DO NOT EDIT.
// versions:
// 	protoc-gen-grpc-web v1.4.2
// 	protoc              v3.21.2
// source: api/eventsourcing/eventstore_service.proto


/* eslint-disable */
// @ts-nocheck


import * as grpcWeb from 'grpc-web';

import * as api_eventsourcing_messages_pb from '../../api/eventsourcing/messages_pb';
import * as google_protobuf_empty_pb from 'google-protobuf/google/protobuf/empty_pb';


export class EventStoreClient {
  client_: grpcWeb.AbstractClientBase;
  hostname_: string;
  credentials_: null | { [index: string]: string; };
  options_: null | { [index: string]: any; };

  constructor (hostname: string,
               credentials?: null | { [index: string]: string; },
               options?: null | { [index: string]: any; }) {
    if (!options) options = {};
    if (!credentials) credentials = {};
    options['format'] = 'text';

    this.client_ = new grpcWeb.GrpcWebClientBase(options);
    this.hostname_ = hostname.replace(/\/+$/, '');
    this.credentials_ = credentials;
    this.options_ = options;
  }

  methodDescriptorRetrieve = new grpcWeb.MethodDescriptor(
    '/eventsourcing.EventStore/Retrieve',
    grpcWeb.MethodType.SERVER_STREAMING,
    api_eventsourcing_messages_pb.EventFilter,
    api_eventsourcing_messages_pb.Event,
    (request: api_eventsourcing_messages_pb.EventFilter) => {
      return request.serializeBinary();
    },
    api_eventsourcing_messages_pb.Event.deserializeBinary
  );

  retrieve(
    request: api_eventsourcing_messages_pb.EventFilter,
    metadata?: grpcWeb.Metadata): grpcWeb.ClientReadableStream<api_eventsourcing_messages_pb.Event> {
    return this.client_.serverStreaming(
      this.hostname_ +
        '/eventsourcing.EventStore/Retrieve',
      request,
      metadata || {},
      this.methodDescriptorRetrieve);
  }

  methodDescriptorRetrieveOr = new grpcWeb.MethodDescriptor(
    '/eventsourcing.EventStore/RetrieveOr',
    grpcWeb.MethodType.SERVER_STREAMING,
    api_eventsourcing_messages_pb.EventFilters,
    api_eventsourcing_messages_pb.Event,
    (request: api_eventsourcing_messages_pb.EventFilters) => {
      return request.serializeBinary();
    },
    api_eventsourcing_messages_pb.Event.deserializeBinary
  );

  retrieveOr(
    request: api_eventsourcing_messages_pb.EventFilters,
    metadata?: grpcWeb.Metadata): grpcWeb.ClientReadableStream<api_eventsourcing_messages_pb.Event> {
    return this.client_.serverStreaming(
      this.hostname_ +
        '/eventsourcing.EventStore/RetrieveOr',
      request,
      metadata || {},
      this.methodDescriptorRetrieveOr);
  }

}

