// Copyright 2022 Monoskope Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// @generated by protoc-gen-es v1.0.0 with parameter "target=ts"
// @generated from file api/eventsourcing/messages.proto (package eventsourcing, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3, StringValue, Timestamp, UInt64Value } from "@bufbuild/protobuf";

/**
 * Event describes anything that has happened in the system.
 * An event type name should be in past tense and contain the intent
 * (TenantUpdated). The event should contain all the data needed when
 * applying/handling it.
 * The combination of aggregate_type, aggregate_id and version is
 * unique.
 *
 * @generated from message eventsourcing.Event
 */
export class Event extends Message<Event> {
  /**
   * Type of the event
   *
   * @generated from field: string type = 1;
   */
  type = "";

  /**
   * Timestamp of when the event was created
   *
   * @generated from field: google.protobuf.Timestamp timestamp = 2;
   */
  timestamp?: Timestamp;

  /**
   * ID of the aggregate that the event should be applied to (UUID 128-bit
   * number)
   *
   * @generated from field: string aggregate_id = 3;
   */
  aggregateId = "";

  /**
   * Type of the aggregate that the event can be applied to
   *
   * @generated from field: string aggregate_type = 4;
   */
  aggregateType = "";

  /**
   * Strict monotone counter, per aggregate/aggregate_id relation
   *
   * @generated from field: google.protobuf.UInt64Value aggregate_version = 5;
   */
  aggregateVersion?: bigint;

  /**
   * Event type specific event data
   *
   * @generated from field: bytes data = 6;
   */
  data = new Uint8Array(0);

  /**
   * Event meta data
   *
   * @generated from field: map<string, string> metadata = 7;
   */
  metadata: { [key: string]: string } = {};

  constructor(data?: PartialMessage<Event>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "eventsourcing.Event";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "type", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "timestamp", kind: "message", T: Timestamp },
    { no: 3, name: "aggregate_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "aggregate_type", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "aggregate_version", kind: "message", T: UInt64Value },
    { no: 6, name: "data", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 7, name: "metadata", kind: "map", K: 9 /* ScalarType.STRING */, V: {kind: "scalar", T: 9 /* ScalarType.STRING */} },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Event {
    return new Event().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Event {
    return new Event().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Event {
    return new Event().fromJsonString(jsonString, options);
  }

  static equals(a: Event | PlainMessage<Event> | undefined, b: Event | PlainMessage<Event> | undefined): boolean {
    return proto3.util.equals(Event, a, b);
  }
}

/**
 * Request to get Events from to the store
 *
 * @generated from message eventsourcing.EventFilter
 */
export class EventFilter extends Message<EventFilter> {
  /**
   * Filter events by aggregate_id
   *
   * @generated from field: google.protobuf.StringValue aggregate_id = 1;
   */
  aggregateId?: string;

  /**
   * Filter events for a specific aggregate type
   *
   * @generated from field: google.protobuf.StringValue aggregate_type = 2;
   */
  aggregateType?: string;

  /**
   * Filter events with a version >= min_version
   *
   * @generated from field: google.protobuf.UInt64Value min_version = 3;
   */
  minVersion?: bigint;

  /**
   * Filter events with a version <= max_version
   *
   * @generated from field: google.protobuf.UInt64Value max_version = 4;
   */
  maxVersion?: bigint;

  /**
   * Filter events with a timestamp >= min_timestamp
   *
   * @generated from field: google.protobuf.Timestamp min_timestamp = 7;
   */
  minTimestamp?: Timestamp;

  /**
   * Filter events with a timestamp <= max_timestamp
   *
   * @generated from field: google.protobuf.Timestamp max_timestamp = 8;
   */
  maxTimestamp?: Timestamp;

  constructor(data?: PartialMessage<EventFilter>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "eventsourcing.EventFilter";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "aggregate_id", kind: "message", T: StringValue },
    { no: 2, name: "aggregate_type", kind: "message", T: StringValue },
    { no: 3, name: "min_version", kind: "message", T: UInt64Value },
    { no: 4, name: "max_version", kind: "message", T: UInt64Value },
    { no: 7, name: "min_timestamp", kind: "message", T: Timestamp },
    { no: 8, name: "max_timestamp", kind: "message", T: Timestamp },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): EventFilter {
    return new EventFilter().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): EventFilter {
    return new EventFilter().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): EventFilter {
    return new EventFilter().fromJsonString(jsonString, options);
  }

  static equals(a: EventFilter | PlainMessage<EventFilter> | undefined, b: EventFilter | PlainMessage<EventFilter> | undefined): boolean {
    return proto3.util.equals(EventFilter, a, b);
  }
}

/**
 * Request to get Events from to the store by using multiple filters
 *
 * @generated from message eventsourcing.EventFilters
 */
export class EventFilters extends Message<EventFilters> {
  /**
   * @generated from field: repeated eventsourcing.EventFilter filters = 1;
   */
  filters: EventFilter[] = [];

  constructor(data?: PartialMessage<EventFilters>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "eventsourcing.EventFilters";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "filters", kind: "message", T: EventFilter, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): EventFilters {
    return new EventFilters().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): EventFilters {
    return new EventFilters().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): EventFilters {
    return new EventFilters().fromJsonString(jsonString, options);
  }

  static equals(a: EventFilters | PlainMessage<EventFilters> | undefined, b: EventFilters | PlainMessage<EventFilters> | undefined): boolean {
    return proto3.util.equals(EventFilters, a, b);
  }
}

