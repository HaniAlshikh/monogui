// Copyright 2022 Monoskope Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// @generated by protoc-gen-es v1.0.0 with parameter "target=ts"
// @generated from file api/eventsourcing/commandhandler_service.proto (package eventsourcing, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3, protoInt64 } from "@bufbuild/protobuf";

/**
 * @generated from message eventsourcing.CommandReply
 */
export class CommandReply extends Message<CommandReply> {
  /**
   * UUID of the referenced aggregate. If this was a "Create*" command, the ID
   * provied with the command is ignored. A valid ID is generated by the command
   * handler and returned in the CommandReply.
   *
   * required
   *
   * @generated from field: string aggregate_id = 1;
   */
  aggregateId = "";

  /**
   * Version of the aggregate after command being executed.
   *
   * @generated from field: uint64 version = 2;
   */
  version = protoInt64.zero;

  constructor(data?: PartialMessage<CommandReply>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "eventsourcing.CommandReply";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "aggregate_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "version", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CommandReply {
    return new CommandReply().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CommandReply {
    return new CommandReply().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CommandReply {
    return new CommandReply().fromJsonString(jsonString, options);
  }

  static equals(a: CommandReply | PlainMessage<CommandReply> | undefined, b: CommandReply | PlainMessage<CommandReply> | undefined): boolean {
    return proto3.util.equals(CommandReply, a, b);
  }
}

