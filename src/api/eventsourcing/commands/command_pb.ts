// Copyright 2022 Monoskope Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// @generated by protoc-gen-es v1.0.0 with parameter "target=ts"
// @generated from file api/eventsourcing/commands/command.proto (package commands, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Any, Message, proto3 } from "@bufbuild/protobuf";

/**
 * Command is a command to be executed by the CommandHandler
 *
 * @generated from message commands.Command
 */
export class Command extends Message<Command> {
  /**
   * Unique identifier of the aggregate the command applies to (UUID 128-bit
   * number)
   *
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * Type of the command
   *
   * @generated from field: string type = 2;
   */
  type = "";

  /**
   * Command type specific data
   *
   * @generated from field: google.protobuf.Any data = 3;
   */
  data?: Any;

  constructor(data?: PartialMessage<Command>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "commands.Command";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "type", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "data", kind: "message", T: Any },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Command {
    return new Command().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Command {
    return new Command().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Command {
    return new Command().fromJsonString(jsonString, options);
  }

  static equals(a: Command | PlainMessage<Command> | undefined, b: Command | PlainMessage<Command> | undefined): boolean {
    return proto3.util.equals(Command, a, b);
  }
}

/**
 * @generated from message commands.TestCommandData
 */
export class TestCommandData extends Message<TestCommandData> {
  /**
   * @generated from field: string test = 1;
   */
  test = "";

  /**
   * @generated from field: int32 test_count = 2;
   */
  testCount = 0;

  constructor(data?: PartialMessage<TestCommandData>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "commands.TestCommandData";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "test", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "test_count", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TestCommandData {
    return new TestCommandData().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TestCommandData {
    return new TestCommandData().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TestCommandData {
    return new TestCommandData().fromJsonString(jsonString, options);
  }

  static equals(a: TestCommandData | PlainMessage<TestCommandData> | undefined, b: TestCommandData | PlainMessage<TestCommandData> | undefined): boolean {
    return proto3.util.equals(TestCommandData, a, b);
  }
}

