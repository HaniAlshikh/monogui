/**
 * @fileoverview gRPC-Web generated client stub for domain
 * @enhanceable
 * @public
 */

// Code generated by protoc-gen-grpc-web. DO NOT EDIT.
// versions:
// 	protoc-gen-grpc-web v1.4.2
// 	protoc              v3.21.2
// source: api/domain/queryhandler_service.proto


/* eslint-disable */
// @ts-nocheck



const grpc = {};
grpc.web = require('grpc-web');


var api_domain_projections_user_pb = require('../../api/domain/projections/user_pb.js')

var api_domain_projections_tenant_pb = require('../../api/domain/projections/tenant_pb.js')

var api_domain_projections_cluster_pb = require('../../api/domain/projections/cluster_pb.js')

var api_domain_projections_tenant_cluster_binding_pb = require('../../api/domain/projections/tenant_cluster_binding_pb.js')

var api_domain_audit_user_pb = require('../../api/domain/audit/user_pb.js')

var api_domain_audit_event_pb = require('../../api/domain/audit/event_pb.js')

var validate_validate_pb = require('../../validate/validate_pb.js')

var google_protobuf_wrappers_pb = require('google-protobuf/google/protobuf/wrappers_pb.js')

var google_protobuf_timestamp_pb = require('google-protobuf/google/protobuf/timestamp_pb.js')

var google_protobuf_empty_pb = require('google-protobuf/google/protobuf/empty_pb.js')
const proto = {};
proto.domain = require('./queryhandler_service_pb.js');

/**
 * @param {string} hostname
 * @param {?Object} credentials
 * @param {?grpc.web.ClientOptions} options
 * @constructor
 * @struct
 * @final
 */
proto.domain.UserClient =
    function(hostname, credentials, options) {
  if (!options) options = {};
  options.format = 'text';

  /**
   * @private @const {!grpc.web.GrpcWebClientBase} The client
   */
  this.client_ = new grpc.web.GrpcWebClientBase(options);

  /**
   * @private @const {string} The hostname
   */
  this.hostname_ = hostname.replace(/\/+$/, '');

};


/**
 * @param {string} hostname
 * @param {?Object} credentials
 * @param {?grpc.web.ClientOptions} options
 * @constructor
 * @struct
 * @final
 */
proto.domain.UserPromiseClient =
    function(hostname, credentials, options) {
  if (!options) options = {};
  options.format = 'text';

  /**
   * @private @const {!grpc.web.GrpcWebClientBase} The client
   */
  this.client_ = new grpc.web.GrpcWebClientBase(options);

  /**
   * @private @const {string} The hostname
   */
  this.hostname_ = hostname.replace(/\/+$/, '');

};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.domain.GetAllRequest,
 *   !proto.projections.User>}
 */
const methodDescriptor_User_GetAll = new grpc.web.MethodDescriptor(
  '/domain.User/GetAll',
  grpc.web.MethodType.SERVER_STREAMING,
  proto.domain.GetAllRequest,
  api_domain_projections_user_pb.User,
  /**
   * @param {!proto.domain.GetAllRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  api_domain_projections_user_pb.User.deserializeBinary
);


/**
 * @param {!proto.domain.GetAllRequest} request The request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!grpc.web.ClientReadableStream<!proto.projections.User>}
 *     The XHR Node Readable Stream
 */
proto.domain.UserClient.prototype.getAll =
    function(request, metadata) {
  return this.client_.serverStreaming(this.hostname_ +
      '/domain.User/GetAll',
      request,
      metadata || {},
      methodDescriptor_User_GetAll);
};


/**
 * @param {!proto.domain.GetAllRequest} request The request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!grpc.web.ClientReadableStream<!proto.projections.User>}
 *     The XHR Node Readable Stream
 */
proto.domain.UserPromiseClient.prototype.getAll =
    function(request, metadata) {
  return this.client_.serverStreaming(this.hostname_ +
      '/domain.User/GetAll',
      request,
      metadata || {},
      methodDescriptor_User_GetAll);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.google.protobuf.StringValue,
 *   !proto.projections.User>}
 */
const methodDescriptor_User_GetById = new grpc.web.MethodDescriptor(
  '/domain.User/GetById',
  grpc.web.MethodType.UNARY,
  google_protobuf_wrappers_pb.StringValue,
  api_domain_projections_user_pb.User,
  /**
   * @param {!proto.google.protobuf.StringValue} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  api_domain_projections_user_pb.User.deserializeBinary
);


/**
 * @param {!proto.google.protobuf.StringValue} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.projections.User)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.projections.User>|undefined}
 *     The XHR Node Readable Stream
 */
proto.domain.UserClient.prototype.getById =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/domain.User/GetById',
      request,
      metadata || {},
      methodDescriptor_User_GetById,
      callback);
};


/**
 * @param {!proto.google.protobuf.StringValue} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.projections.User>}
 *     Promise that resolves to the response
 */
proto.domain.UserPromiseClient.prototype.getById =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/domain.User/GetById',
      request,
      metadata || {},
      methodDescriptor_User_GetById);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.google.protobuf.StringValue,
 *   !proto.projections.User>}
 */
const methodDescriptor_User_GetByEmail = new grpc.web.MethodDescriptor(
  '/domain.User/GetByEmail',
  grpc.web.MethodType.UNARY,
  google_protobuf_wrappers_pb.StringValue,
  api_domain_projections_user_pb.User,
  /**
   * @param {!proto.google.protobuf.StringValue} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  api_domain_projections_user_pb.User.deserializeBinary
);


/**
 * @param {!proto.google.protobuf.StringValue} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.projections.User)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.projections.User>|undefined}
 *     The XHR Node Readable Stream
 */
proto.domain.UserClient.prototype.getByEmail =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/domain.User/GetByEmail',
      request,
      metadata || {},
      methodDescriptor_User_GetByEmail,
      callback);
};


/**
 * @param {!proto.google.protobuf.StringValue} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.projections.User>}
 *     Promise that resolves to the response
 */
proto.domain.UserPromiseClient.prototype.getByEmail =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/domain.User/GetByEmail',
      request,
      metadata || {},
      methodDescriptor_User_GetByEmail);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.google.protobuf.StringValue,
 *   !proto.projections.UserRoleBinding>}
 */
const methodDescriptor_User_GetRoleBindingsById = new grpc.web.MethodDescriptor(
  '/domain.User/GetRoleBindingsById',
  grpc.web.MethodType.SERVER_STREAMING,
  google_protobuf_wrappers_pb.StringValue,
  api_domain_projections_user_pb.UserRoleBinding,
  /**
   * @param {!proto.google.protobuf.StringValue} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  api_domain_projections_user_pb.UserRoleBinding.deserializeBinary
);


/**
 * @param {!proto.google.protobuf.StringValue} request The request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!grpc.web.ClientReadableStream<!proto.projections.UserRoleBinding>}
 *     The XHR Node Readable Stream
 */
proto.domain.UserClient.prototype.getRoleBindingsById =
    function(request, metadata) {
  return this.client_.serverStreaming(this.hostname_ +
      '/domain.User/GetRoleBindingsById',
      request,
      metadata || {},
      methodDescriptor_User_GetRoleBindingsById);
};


/**
 * @param {!proto.google.protobuf.StringValue} request The request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!grpc.web.ClientReadableStream<!proto.projections.UserRoleBinding>}
 *     The XHR Node Readable Stream
 */
proto.domain.UserPromiseClient.prototype.getRoleBindingsById =
    function(request, metadata) {
  return this.client_.serverStreaming(this.hostname_ +
      '/domain.User/GetRoleBindingsById',
      request,
      metadata || {},
      methodDescriptor_User_GetRoleBindingsById);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.domain.GetCountRequest,
 *   !proto.domain.GetCountResult>}
 */
const methodDescriptor_User_GetCount = new grpc.web.MethodDescriptor(
  '/domain.User/GetCount',
  grpc.web.MethodType.UNARY,
  proto.domain.GetCountRequest,
  proto.domain.GetCountResult,
  /**
   * @param {!proto.domain.GetCountRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.domain.GetCountResult.deserializeBinary
);


/**
 * @param {!proto.domain.GetCountRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.domain.GetCountResult)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.domain.GetCountResult>|undefined}
 *     The XHR Node Readable Stream
 */
proto.domain.UserClient.prototype.getCount =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/domain.User/GetCount',
      request,
      metadata || {},
      methodDescriptor_User_GetCount,
      callback);
};


/**
 * @param {!proto.domain.GetCountRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.domain.GetCountResult>}
 *     Promise that resolves to the response
 */
proto.domain.UserPromiseClient.prototype.getCount =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/domain.User/GetCount',
      request,
      metadata || {},
      methodDescriptor_User_GetCount);
};


/**
 * @param {string} hostname
 * @param {?Object} credentials
 * @param {?grpc.web.ClientOptions} options
 * @constructor
 * @struct
 * @final
 */
proto.domain.TenantClient =
    function(hostname, credentials, options) {
  if (!options) options = {};
  options.format = 'text';

  /**
   * @private @const {!grpc.web.GrpcWebClientBase} The client
   */
  this.client_ = new grpc.web.GrpcWebClientBase(options);

  /**
   * @private @const {string} The hostname
   */
  this.hostname_ = hostname.replace(/\/+$/, '');

};


/**
 * @param {string} hostname
 * @param {?Object} credentials
 * @param {?grpc.web.ClientOptions} options
 * @constructor
 * @struct
 * @final
 */
proto.domain.TenantPromiseClient =
    function(hostname, credentials, options) {
  if (!options) options = {};
  options.format = 'text';

  /**
   * @private @const {!grpc.web.GrpcWebClientBase} The client
   */
  this.client_ = new grpc.web.GrpcWebClientBase(options);

  /**
   * @private @const {string} The hostname
   */
  this.hostname_ = hostname.replace(/\/+$/, '');

};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.domain.GetAllRequest,
 *   !proto.projections.Tenant>}
 */
const methodDescriptor_Tenant_GetAll = new grpc.web.MethodDescriptor(
  '/domain.Tenant/GetAll',
  grpc.web.MethodType.SERVER_STREAMING,
  proto.domain.GetAllRequest,
  api_domain_projections_tenant_pb.Tenant,
  /**
   * @param {!proto.domain.GetAllRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  api_domain_projections_tenant_pb.Tenant.deserializeBinary
);


/**
 * @param {!proto.domain.GetAllRequest} request The request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!grpc.web.ClientReadableStream<!proto.projections.Tenant>}
 *     The XHR Node Readable Stream
 */
proto.domain.TenantClient.prototype.getAll =
    function(request, metadata) {
  return this.client_.serverStreaming(this.hostname_ +
      '/domain.Tenant/GetAll',
      request,
      metadata || {},
      methodDescriptor_Tenant_GetAll);
};


/**
 * @param {!proto.domain.GetAllRequest} request The request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!grpc.web.ClientReadableStream<!proto.projections.Tenant>}
 *     The XHR Node Readable Stream
 */
proto.domain.TenantPromiseClient.prototype.getAll =
    function(request, metadata) {
  return this.client_.serverStreaming(this.hostname_ +
      '/domain.Tenant/GetAll',
      request,
      metadata || {},
      methodDescriptor_Tenant_GetAll);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.google.protobuf.StringValue,
 *   !proto.projections.Tenant>}
 */
const methodDescriptor_Tenant_GetById = new grpc.web.MethodDescriptor(
  '/domain.Tenant/GetById',
  grpc.web.MethodType.UNARY,
  google_protobuf_wrappers_pb.StringValue,
  api_domain_projections_tenant_pb.Tenant,
  /**
   * @param {!proto.google.protobuf.StringValue} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  api_domain_projections_tenant_pb.Tenant.deserializeBinary
);


/**
 * @param {!proto.google.protobuf.StringValue} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.projections.Tenant)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.projections.Tenant>|undefined}
 *     The XHR Node Readable Stream
 */
proto.domain.TenantClient.prototype.getById =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/domain.Tenant/GetById',
      request,
      metadata || {},
      methodDescriptor_Tenant_GetById,
      callback);
};


/**
 * @param {!proto.google.protobuf.StringValue} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.projections.Tenant>}
 *     Promise that resolves to the response
 */
proto.domain.TenantPromiseClient.prototype.getById =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/domain.Tenant/GetById',
      request,
      metadata || {},
      methodDescriptor_Tenant_GetById);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.google.protobuf.StringValue,
 *   !proto.projections.Tenant>}
 */
const methodDescriptor_Tenant_GetByName = new grpc.web.MethodDescriptor(
  '/domain.Tenant/GetByName',
  grpc.web.MethodType.UNARY,
  google_protobuf_wrappers_pb.StringValue,
  api_domain_projections_tenant_pb.Tenant,
  /**
   * @param {!proto.google.protobuf.StringValue} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  api_domain_projections_tenant_pb.Tenant.deserializeBinary
);


/**
 * @param {!proto.google.protobuf.StringValue} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.projections.Tenant)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.projections.Tenant>|undefined}
 *     The XHR Node Readable Stream
 */
proto.domain.TenantClient.prototype.getByName =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/domain.Tenant/GetByName',
      request,
      metadata || {},
      methodDescriptor_Tenant_GetByName,
      callback);
};


/**
 * @param {!proto.google.protobuf.StringValue} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.projections.Tenant>}
 *     Promise that resolves to the response
 */
proto.domain.TenantPromiseClient.prototype.getByName =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/domain.Tenant/GetByName',
      request,
      metadata || {},
      methodDescriptor_Tenant_GetByName);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.google.protobuf.StringValue,
 *   !proto.projections.TenantUser>}
 */
const methodDescriptor_Tenant_GetUsers = new grpc.web.MethodDescriptor(
  '/domain.Tenant/GetUsers',
  grpc.web.MethodType.SERVER_STREAMING,
  google_protobuf_wrappers_pb.StringValue,
  api_domain_projections_tenant_pb.TenantUser,
  /**
   * @param {!proto.google.protobuf.StringValue} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  api_domain_projections_tenant_pb.TenantUser.deserializeBinary
);


/**
 * @param {!proto.google.protobuf.StringValue} request The request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!grpc.web.ClientReadableStream<!proto.projections.TenantUser>}
 *     The XHR Node Readable Stream
 */
proto.domain.TenantClient.prototype.getUsers =
    function(request, metadata) {
  return this.client_.serverStreaming(this.hostname_ +
      '/domain.Tenant/GetUsers',
      request,
      metadata || {},
      methodDescriptor_Tenant_GetUsers);
};


/**
 * @param {!proto.google.protobuf.StringValue} request The request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!grpc.web.ClientReadableStream<!proto.projections.TenantUser>}
 *     The XHR Node Readable Stream
 */
proto.domain.TenantPromiseClient.prototype.getUsers =
    function(request, metadata) {
  return this.client_.serverStreaming(this.hostname_ +
      '/domain.Tenant/GetUsers',
      request,
      metadata || {},
      methodDescriptor_Tenant_GetUsers);
};


/**
 * @param {string} hostname
 * @param {?Object} credentials
 * @param {?grpc.web.ClientOptions} options
 * @constructor
 * @struct
 * @final
 */
proto.domain.ClusterClient =
    function(hostname, credentials, options) {
  if (!options) options = {};
  options.format = 'text';

  /**
   * @private @const {!grpc.web.GrpcWebClientBase} The client
   */
  this.client_ = new grpc.web.GrpcWebClientBase(options);

  /**
   * @private @const {string} The hostname
   */
  this.hostname_ = hostname.replace(/\/+$/, '');

};


/**
 * @param {string} hostname
 * @param {?Object} credentials
 * @param {?grpc.web.ClientOptions} options
 * @constructor
 * @struct
 * @final
 */
proto.domain.ClusterPromiseClient =
    function(hostname, credentials, options) {
  if (!options) options = {};
  options.format = 'text';

  /**
   * @private @const {!grpc.web.GrpcWebClientBase} The client
   */
  this.client_ = new grpc.web.GrpcWebClientBase(options);

  /**
   * @private @const {string} The hostname
   */
  this.hostname_ = hostname.replace(/\/+$/, '');

};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.domain.GetAllRequest,
 *   !proto.projections.Cluster>}
 */
const methodDescriptor_Cluster_GetAll = new grpc.web.MethodDescriptor(
  '/domain.Cluster/GetAll',
  grpc.web.MethodType.SERVER_STREAMING,
  proto.domain.GetAllRequest,
  api_domain_projections_cluster_pb.Cluster,
  /**
   * @param {!proto.domain.GetAllRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  api_domain_projections_cluster_pb.Cluster.deserializeBinary
);


/**
 * @param {!proto.domain.GetAllRequest} request The request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!grpc.web.ClientReadableStream<!proto.projections.Cluster>}
 *     The XHR Node Readable Stream
 */
proto.domain.ClusterClient.prototype.getAll =
    function(request, metadata) {
  return this.client_.serverStreaming(this.hostname_ +
      '/domain.Cluster/GetAll',
      request,
      metadata || {},
      methodDescriptor_Cluster_GetAll);
};


/**
 * @param {!proto.domain.GetAllRequest} request The request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!grpc.web.ClientReadableStream<!proto.projections.Cluster>}
 *     The XHR Node Readable Stream
 */
proto.domain.ClusterPromiseClient.prototype.getAll =
    function(request, metadata) {
  return this.client_.serverStreaming(this.hostname_ +
      '/domain.Cluster/GetAll',
      request,
      metadata || {},
      methodDescriptor_Cluster_GetAll);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.google.protobuf.StringValue,
 *   !proto.projections.Cluster>}
 */
const methodDescriptor_Cluster_GetById = new grpc.web.MethodDescriptor(
  '/domain.Cluster/GetById',
  grpc.web.MethodType.UNARY,
  google_protobuf_wrappers_pb.StringValue,
  api_domain_projections_cluster_pb.Cluster,
  /**
   * @param {!proto.google.protobuf.StringValue} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  api_domain_projections_cluster_pb.Cluster.deserializeBinary
);


/**
 * @param {!proto.google.protobuf.StringValue} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.projections.Cluster)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.projections.Cluster>|undefined}
 *     The XHR Node Readable Stream
 */
proto.domain.ClusterClient.prototype.getById =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/domain.Cluster/GetById',
      request,
      metadata || {},
      methodDescriptor_Cluster_GetById,
      callback);
};


/**
 * @param {!proto.google.protobuf.StringValue} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.projections.Cluster>}
 *     Promise that resolves to the response
 */
proto.domain.ClusterPromiseClient.prototype.getById =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/domain.Cluster/GetById',
      request,
      metadata || {},
      methodDescriptor_Cluster_GetById);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.google.protobuf.StringValue,
 *   !proto.projections.Cluster>}
 */
const methodDescriptor_Cluster_GetByName = new grpc.web.MethodDescriptor(
  '/domain.Cluster/GetByName',
  grpc.web.MethodType.UNARY,
  google_protobuf_wrappers_pb.StringValue,
  api_domain_projections_cluster_pb.Cluster,
  /**
   * @param {!proto.google.protobuf.StringValue} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  api_domain_projections_cluster_pb.Cluster.deserializeBinary
);


/**
 * @param {!proto.google.protobuf.StringValue} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.projections.Cluster)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.projections.Cluster>|undefined}
 *     The XHR Node Readable Stream
 */
proto.domain.ClusterClient.prototype.getByName =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/domain.Cluster/GetByName',
      request,
      metadata || {},
      methodDescriptor_Cluster_GetByName,
      callback);
};


/**
 * @param {!proto.google.protobuf.StringValue} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.projections.Cluster>}
 *     Promise that resolves to the response
 */
proto.domain.ClusterPromiseClient.prototype.getByName =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/domain.Cluster/GetByName',
      request,
      metadata || {},
      methodDescriptor_Cluster_GetByName);
};


/**
 * @param {string} hostname
 * @param {?Object} credentials
 * @param {?grpc.web.ClientOptions} options
 * @constructor
 * @struct
 * @final
 */
proto.domain.ClusterAccessClient =
    function(hostname, credentials, options) {
  if (!options) options = {};
  options.format = 'text';

  /**
   * @private @const {!grpc.web.GrpcWebClientBase} The client
   */
  this.client_ = new grpc.web.GrpcWebClientBase(options);

  /**
   * @private @const {string} The hostname
   */
  this.hostname_ = hostname.replace(/\/+$/, '');

};


/**
 * @param {string} hostname
 * @param {?Object} credentials
 * @param {?grpc.web.ClientOptions} options
 * @constructor
 * @struct
 * @final
 */
proto.domain.ClusterAccessPromiseClient =
    function(hostname, credentials, options) {
  if (!options) options = {};
  options.format = 'text';

  /**
   * @private @const {!grpc.web.GrpcWebClientBase} The client
   */
  this.client_ = new grpc.web.GrpcWebClientBase(options);

  /**
   * @private @const {string} The hostname
   */
  this.hostname_ = hostname.replace(/\/+$/, '');

};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.google.protobuf.Empty,
 *   !proto.projections.ClusterAccess>}
 */
const methodDescriptor_ClusterAccess_GetClusterAccess = new grpc.web.MethodDescriptor(
  '/domain.ClusterAccess/GetClusterAccess',
  grpc.web.MethodType.SERVER_STREAMING,
  google_protobuf_empty_pb.Empty,
  api_domain_projections_cluster_pb.ClusterAccess,
  /**
   * @param {!proto.google.protobuf.Empty} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  api_domain_projections_cluster_pb.ClusterAccess.deserializeBinary
);


/**
 * @param {!proto.google.protobuf.Empty} request The request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!grpc.web.ClientReadableStream<!proto.projections.ClusterAccess>}
 *     The XHR Node Readable Stream
 */
proto.domain.ClusterAccessClient.prototype.getClusterAccess =
    function(request, metadata) {
  return this.client_.serverStreaming(this.hostname_ +
      '/domain.ClusterAccess/GetClusterAccess',
      request,
      metadata || {},
      methodDescriptor_ClusterAccess_GetClusterAccess);
};


/**
 * @param {!proto.google.protobuf.Empty} request The request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!grpc.web.ClientReadableStream<!proto.projections.ClusterAccess>}
 *     The XHR Node Readable Stream
 */
proto.domain.ClusterAccessPromiseClient.prototype.getClusterAccess =
    function(request, metadata) {
  return this.client_.serverStreaming(this.hostname_ +
      '/domain.ClusterAccess/GetClusterAccess',
      request,
      metadata || {},
      methodDescriptor_ClusterAccess_GetClusterAccess);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.google.protobuf.Empty,
 *   !proto.projections.ClusterAccessV2>}
 */
const methodDescriptor_ClusterAccess_GetClusterAccessV2 = new grpc.web.MethodDescriptor(
  '/domain.ClusterAccess/GetClusterAccessV2',
  grpc.web.MethodType.SERVER_STREAMING,
  google_protobuf_empty_pb.Empty,
  api_domain_projections_cluster_pb.ClusterAccessV2,
  /**
   * @param {!proto.google.protobuf.Empty} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  api_domain_projections_cluster_pb.ClusterAccessV2.deserializeBinary
);


/**
 * @param {!proto.google.protobuf.Empty} request The request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!grpc.web.ClientReadableStream<!proto.projections.ClusterAccessV2>}
 *     The XHR Node Readable Stream
 */
proto.domain.ClusterAccessClient.prototype.getClusterAccessV2 =
    function(request, metadata) {
  return this.client_.serverStreaming(this.hostname_ +
      '/domain.ClusterAccess/GetClusterAccessV2',
      request,
      metadata || {},
      methodDescriptor_ClusterAccess_GetClusterAccessV2);
};


/**
 * @param {!proto.google.protobuf.Empty} request The request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!grpc.web.ClientReadableStream<!proto.projections.ClusterAccessV2>}
 *     The XHR Node Readable Stream
 */
proto.domain.ClusterAccessPromiseClient.prototype.getClusterAccessV2 =
    function(request, metadata) {
  return this.client_.serverStreaming(this.hostname_ +
      '/domain.ClusterAccess/GetClusterAccessV2',
      request,
      metadata || {},
      methodDescriptor_ClusterAccess_GetClusterAccessV2);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.google.protobuf.StringValue,
 *   !proto.projections.TenantClusterBinding>}
 */
const methodDescriptor_ClusterAccess_GetTenantClusterMappingsByTenantId = new grpc.web.MethodDescriptor(
  '/domain.ClusterAccess/GetTenantClusterMappingsByTenantId',
  grpc.web.MethodType.SERVER_STREAMING,
  google_protobuf_wrappers_pb.StringValue,
  api_domain_projections_tenant_cluster_binding_pb.TenantClusterBinding,
  /**
   * @param {!proto.google.protobuf.StringValue} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  api_domain_projections_tenant_cluster_binding_pb.TenantClusterBinding.deserializeBinary
);


/**
 * @param {!proto.google.protobuf.StringValue} request The request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!grpc.web.ClientReadableStream<!proto.projections.TenantClusterBinding>}
 *     The XHR Node Readable Stream
 */
proto.domain.ClusterAccessClient.prototype.getTenantClusterMappingsByTenantId =
    function(request, metadata) {
  return this.client_.serverStreaming(this.hostname_ +
      '/domain.ClusterAccess/GetTenantClusterMappingsByTenantId',
      request,
      metadata || {},
      methodDescriptor_ClusterAccess_GetTenantClusterMappingsByTenantId);
};


/**
 * @param {!proto.google.protobuf.StringValue} request The request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!grpc.web.ClientReadableStream<!proto.projections.TenantClusterBinding>}
 *     The XHR Node Readable Stream
 */
proto.domain.ClusterAccessPromiseClient.prototype.getTenantClusterMappingsByTenantId =
    function(request, metadata) {
  return this.client_.serverStreaming(this.hostname_ +
      '/domain.ClusterAccess/GetTenantClusterMappingsByTenantId',
      request,
      metadata || {},
      methodDescriptor_ClusterAccess_GetTenantClusterMappingsByTenantId);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.google.protobuf.StringValue,
 *   !proto.projections.TenantClusterBinding>}
 */
const methodDescriptor_ClusterAccess_GetTenantClusterMappingsByClusterId = new grpc.web.MethodDescriptor(
  '/domain.ClusterAccess/GetTenantClusterMappingsByClusterId',
  grpc.web.MethodType.SERVER_STREAMING,
  google_protobuf_wrappers_pb.StringValue,
  api_domain_projections_tenant_cluster_binding_pb.TenantClusterBinding,
  /**
   * @param {!proto.google.protobuf.StringValue} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  api_domain_projections_tenant_cluster_binding_pb.TenantClusterBinding.deserializeBinary
);


/**
 * @param {!proto.google.protobuf.StringValue} request The request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!grpc.web.ClientReadableStream<!proto.projections.TenantClusterBinding>}
 *     The XHR Node Readable Stream
 */
proto.domain.ClusterAccessClient.prototype.getTenantClusterMappingsByClusterId =
    function(request, metadata) {
  return this.client_.serverStreaming(this.hostname_ +
      '/domain.ClusterAccess/GetTenantClusterMappingsByClusterId',
      request,
      metadata || {},
      methodDescriptor_ClusterAccess_GetTenantClusterMappingsByClusterId);
};


/**
 * @param {!proto.google.protobuf.StringValue} request The request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!grpc.web.ClientReadableStream<!proto.projections.TenantClusterBinding>}
 *     The XHR Node Readable Stream
 */
proto.domain.ClusterAccessPromiseClient.prototype.getTenantClusterMappingsByClusterId =
    function(request, metadata) {
  return this.client_.serverStreaming(this.hostname_ +
      '/domain.ClusterAccess/GetTenantClusterMappingsByClusterId',
      request,
      metadata || {},
      methodDescriptor_ClusterAccess_GetTenantClusterMappingsByClusterId);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.domain.GetClusterMappingRequest,
 *   !proto.projections.TenantClusterBinding>}
 */
const methodDescriptor_ClusterAccess_GetTenantClusterMappingByTenantAndClusterId = new grpc.web.MethodDescriptor(
  '/domain.ClusterAccess/GetTenantClusterMappingByTenantAndClusterId',
  grpc.web.MethodType.UNARY,
  proto.domain.GetClusterMappingRequest,
  api_domain_projections_tenant_cluster_binding_pb.TenantClusterBinding,
  /**
   * @param {!proto.domain.GetClusterMappingRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  api_domain_projections_tenant_cluster_binding_pb.TenantClusterBinding.deserializeBinary
);


/**
 * @param {!proto.domain.GetClusterMappingRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.projections.TenantClusterBinding)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.projections.TenantClusterBinding>|undefined}
 *     The XHR Node Readable Stream
 */
proto.domain.ClusterAccessClient.prototype.getTenantClusterMappingByTenantAndClusterId =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/domain.ClusterAccess/GetTenantClusterMappingByTenantAndClusterId',
      request,
      metadata || {},
      methodDescriptor_ClusterAccess_GetTenantClusterMappingByTenantAndClusterId,
      callback);
};


/**
 * @param {!proto.domain.GetClusterMappingRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.projections.TenantClusterBinding>}
 *     Promise that resolves to the response
 */
proto.domain.ClusterAccessPromiseClient.prototype.getTenantClusterMappingByTenantAndClusterId =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/domain.ClusterAccess/GetTenantClusterMappingByTenantAndClusterId',
      request,
      metadata || {},
      methodDescriptor_ClusterAccess_GetTenantClusterMappingByTenantAndClusterId);
};


/**
 * @param {string} hostname
 * @param {?Object} credentials
 * @param {?grpc.web.ClientOptions} options
 * @constructor
 * @struct
 * @final
 */
proto.domain.AuditLogClient =
    function(hostname, credentials, options) {
  if (!options) options = {};
  options.format = 'text';

  /**
   * @private @const {!grpc.web.GrpcWebClientBase} The client
   */
  this.client_ = new grpc.web.GrpcWebClientBase(options);

  /**
   * @private @const {string} The hostname
   */
  this.hostname_ = hostname.replace(/\/+$/, '');

};


/**
 * @param {string} hostname
 * @param {?Object} credentials
 * @param {?grpc.web.ClientOptions} options
 * @constructor
 * @struct
 * @final
 */
proto.domain.AuditLogPromiseClient =
    function(hostname, credentials, options) {
  if (!options) options = {};
  options.format = 'text';

  /**
   * @private @const {!grpc.web.GrpcWebClientBase} The client
   */
  this.client_ = new grpc.web.GrpcWebClientBase(options);

  /**
   * @private @const {string} The hostname
   */
  this.hostname_ = hostname.replace(/\/+$/, '');

};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.domain.GetAuditLogByDateRangeRequest,
 *   !proto.audit.HumanReadableEvent>}
 */
const methodDescriptor_AuditLog_GetByDateRange = new grpc.web.MethodDescriptor(
  '/domain.AuditLog/GetByDateRange',
  grpc.web.MethodType.SERVER_STREAMING,
  proto.domain.GetAuditLogByDateRangeRequest,
  api_domain_audit_event_pb.HumanReadableEvent,
  /**
   * @param {!proto.domain.GetAuditLogByDateRangeRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  api_domain_audit_event_pb.HumanReadableEvent.deserializeBinary
);


/**
 * @param {!proto.domain.GetAuditLogByDateRangeRequest} request The request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!grpc.web.ClientReadableStream<!proto.audit.HumanReadableEvent>}
 *     The XHR Node Readable Stream
 */
proto.domain.AuditLogClient.prototype.getByDateRange =
    function(request, metadata) {
  return this.client_.serverStreaming(this.hostname_ +
      '/domain.AuditLog/GetByDateRange',
      request,
      metadata || {},
      methodDescriptor_AuditLog_GetByDateRange);
};


/**
 * @param {!proto.domain.GetAuditLogByDateRangeRequest} request The request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!grpc.web.ClientReadableStream<!proto.audit.HumanReadableEvent>}
 *     The XHR Node Readable Stream
 */
proto.domain.AuditLogPromiseClient.prototype.getByDateRange =
    function(request, metadata) {
  return this.client_.serverStreaming(this.hostname_ +
      '/domain.AuditLog/GetByDateRange',
      request,
      metadata || {},
      methodDescriptor_AuditLog_GetByDateRange);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.domain.GetByUserRequest,
 *   !proto.audit.HumanReadableEvent>}
 */
const methodDescriptor_AuditLog_GetByUser = new grpc.web.MethodDescriptor(
  '/domain.AuditLog/GetByUser',
  grpc.web.MethodType.SERVER_STREAMING,
  proto.domain.GetByUserRequest,
  api_domain_audit_event_pb.HumanReadableEvent,
  /**
   * @param {!proto.domain.GetByUserRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  api_domain_audit_event_pb.HumanReadableEvent.deserializeBinary
);


/**
 * @param {!proto.domain.GetByUserRequest} request The request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!grpc.web.ClientReadableStream<!proto.audit.HumanReadableEvent>}
 *     The XHR Node Readable Stream
 */
proto.domain.AuditLogClient.prototype.getByUser =
    function(request, metadata) {
  return this.client_.serverStreaming(this.hostname_ +
      '/domain.AuditLog/GetByUser',
      request,
      metadata || {},
      methodDescriptor_AuditLog_GetByUser);
};


/**
 * @param {!proto.domain.GetByUserRequest} request The request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!grpc.web.ClientReadableStream<!proto.audit.HumanReadableEvent>}
 *     The XHR Node Readable Stream
 */
proto.domain.AuditLogPromiseClient.prototype.getByUser =
    function(request, metadata) {
  return this.client_.serverStreaming(this.hostname_ +
      '/domain.AuditLog/GetByUser',
      request,
      metadata || {},
      methodDescriptor_AuditLog_GetByUser);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.domain.GetUserActionsRequest,
 *   !proto.audit.HumanReadableEvent>}
 */
const methodDescriptor_AuditLog_GetUserActions = new grpc.web.MethodDescriptor(
  '/domain.AuditLog/GetUserActions',
  grpc.web.MethodType.SERVER_STREAMING,
  proto.domain.GetUserActionsRequest,
  api_domain_audit_event_pb.HumanReadableEvent,
  /**
   * @param {!proto.domain.GetUserActionsRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  api_domain_audit_event_pb.HumanReadableEvent.deserializeBinary
);


/**
 * @param {!proto.domain.GetUserActionsRequest} request The request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!grpc.web.ClientReadableStream<!proto.audit.HumanReadableEvent>}
 *     The XHR Node Readable Stream
 */
proto.domain.AuditLogClient.prototype.getUserActions =
    function(request, metadata) {
  return this.client_.serverStreaming(this.hostname_ +
      '/domain.AuditLog/GetUserActions',
      request,
      metadata || {},
      methodDescriptor_AuditLog_GetUserActions);
};


/**
 * @param {!proto.domain.GetUserActionsRequest} request The request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!grpc.web.ClientReadableStream<!proto.audit.HumanReadableEvent>}
 *     The XHR Node Readable Stream
 */
proto.domain.AuditLogPromiseClient.prototype.getUserActions =
    function(request, metadata) {
  return this.client_.serverStreaming(this.hostname_ +
      '/domain.AuditLog/GetUserActions',
      request,
      metadata || {},
      methodDescriptor_AuditLog_GetUserActions);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.domain.GetUsersOverviewRequest,
 *   !proto.audit.UserOverview>}
 */
const methodDescriptor_AuditLog_GetUsersOverview = new grpc.web.MethodDescriptor(
  '/domain.AuditLog/GetUsersOverview',
  grpc.web.MethodType.SERVER_STREAMING,
  proto.domain.GetUsersOverviewRequest,
  api_domain_audit_user_pb.UserOverview,
  /**
   * @param {!proto.domain.GetUsersOverviewRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  api_domain_audit_user_pb.UserOverview.deserializeBinary
);


/**
 * @param {!proto.domain.GetUsersOverviewRequest} request The request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!grpc.web.ClientReadableStream<!proto.audit.UserOverview>}
 *     The XHR Node Readable Stream
 */
proto.domain.AuditLogClient.prototype.getUsersOverview =
    function(request, metadata) {
  return this.client_.serverStreaming(this.hostname_ +
      '/domain.AuditLog/GetUsersOverview',
      request,
      metadata || {},
      methodDescriptor_AuditLog_GetUsersOverview);
};


/**
 * @param {!proto.domain.GetUsersOverviewRequest} request The request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!grpc.web.ClientReadableStream<!proto.audit.UserOverview>}
 *     The XHR Node Readable Stream
 */
proto.domain.AuditLogPromiseClient.prototype.getUsersOverview =
    function(request, metadata) {
  return this.client_.serverStreaming(this.hostname_ +
      '/domain.AuditLog/GetUsersOverview',
      request,
      metadata || {},
      methodDescriptor_AuditLog_GetUsersOverview);
};


/**
 * @param {string} hostname
 * @param {?Object} credentials
 * @param {?grpc.web.ClientOptions} options
 * @constructor
 * @struct
 * @final
 */
proto.domain.K8sAuthZClient =
    function(hostname, credentials, options) {
  if (!options) options = {};
  options.format = 'text';

  /**
   * @private @const {!grpc.web.GrpcWebClientBase} The client
   */
  this.client_ = new grpc.web.GrpcWebClientBase(options);

  /**
   * @private @const {string} The hostname
   */
  this.hostname_ = hostname.replace(/\/+$/, '');

};


/**
 * @param {string} hostname
 * @param {?Object} credentials
 * @param {?grpc.web.ClientOptions} options
 * @constructor
 * @struct
 * @final
 */
proto.domain.K8sAuthZPromiseClient =
    function(hostname, credentials, options) {
  if (!options) options = {};
  options.format = 'text';

  /**
   * @private @const {!grpc.web.GrpcWebClientBase} The client
   */
  this.client_ = new grpc.web.GrpcWebClientBase(options);

  /**
   * @private @const {string} The hostname
   */
  this.hostname_ = hostname.replace(/\/+$/, '');

};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.google.protobuf.Empty,
 *   !proto.google.protobuf.BytesValue>}
 */
const methodDescriptor_K8sAuthZ_GetAll = new grpc.web.MethodDescriptor(
  '/domain.K8sAuthZ/GetAll',
  grpc.web.MethodType.SERVER_STREAMING,
  google_protobuf_empty_pb.Empty,
  google_protobuf_wrappers_pb.BytesValue,
  /**
   * @param {!proto.google.protobuf.Empty} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  google_protobuf_wrappers_pb.BytesValue.deserializeBinary
);


/**
 * @param {!proto.google.protobuf.Empty} request The request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!grpc.web.ClientReadableStream<!proto.google.protobuf.BytesValue>}
 *     The XHR Node Readable Stream
 */
proto.domain.K8sAuthZClient.prototype.getAll =
    function(request, metadata) {
  return this.client_.serverStreaming(this.hostname_ +
      '/domain.K8sAuthZ/GetAll',
      request,
      metadata || {},
      methodDescriptor_K8sAuthZ_GetAll);
};


/**
 * @param {!proto.google.protobuf.Empty} request The request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!grpc.web.ClientReadableStream<!proto.google.protobuf.BytesValue>}
 *     The XHR Node Readable Stream
 */
proto.domain.K8sAuthZPromiseClient.prototype.getAll =
    function(request, metadata) {
  return this.client_.serverStreaming(this.hostname_ +
      '/domain.K8sAuthZ/GetAll',
      request,
      metadata || {},
      methodDescriptor_K8sAuthZ_GetAll);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.google.protobuf.StringValue,
 *   !proto.google.protobuf.BytesValue>}
 */
const methodDescriptor_K8sAuthZ_GetByClusterId = new grpc.web.MethodDescriptor(
  '/domain.K8sAuthZ/GetByClusterId',
  grpc.web.MethodType.SERVER_STREAMING,
  google_protobuf_wrappers_pb.StringValue,
  google_protobuf_wrappers_pb.BytesValue,
  /**
   * @param {!proto.google.protobuf.StringValue} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  google_protobuf_wrappers_pb.BytesValue.deserializeBinary
);


/**
 * @param {!proto.google.protobuf.StringValue} request The request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!grpc.web.ClientReadableStream<!proto.google.protobuf.BytesValue>}
 *     The XHR Node Readable Stream
 */
proto.domain.K8sAuthZClient.prototype.getByClusterId =
    function(request, metadata) {
  return this.client_.serverStreaming(this.hostname_ +
      '/domain.K8sAuthZ/GetByClusterId',
      request,
      metadata || {},
      methodDescriptor_K8sAuthZ_GetByClusterId);
};


/**
 * @param {!proto.google.protobuf.StringValue} request The request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!grpc.web.ClientReadableStream<!proto.google.protobuf.BytesValue>}
 *     The XHR Node Readable Stream
 */
proto.domain.K8sAuthZPromiseClient.prototype.getByClusterId =
    function(request, metadata) {
  return this.client_.serverStreaming(this.hostname_ +
      '/domain.K8sAuthZ/GetByClusterId',
      request,
      metadata || {},
      methodDescriptor_K8sAuthZ_GetByClusterId);
};


module.exports = proto.domain;

