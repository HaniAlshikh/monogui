// Copyright 2022 Monoskope Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// @generated by protoc-gen-connect-web v0.7.0 with parameter "target=ts,import_extension=none"
// @generated from file api/domain/queryhandler_service.proto (package domain, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import {
  GetAllRequest,
  GetAuditLogByDateRangeRequest,
  GetByUserRequest,
  GetClusterMappingRequest,
  GetCountRequest,
  GetCountResult,
  GetUserActionsRequest,
  GetUsersOverviewRequest
} from "./queryhandler_service_pb";
import {User as UserProjection, UserRoleBinding} from "./projections/user_pb";
import {BytesValue, Empty, MethodKind, StringValue} from "@bufbuild/protobuf";
import {Tenant as TenantProjection, TenantUser} from "./projections/tenant_pb";
import {
  Cluster as ClusterProjection,
  ClusterAccess as ClusterAccessProjection,
  ClusterAccessV2
} from "./projections/cluster_pb";
import {TenantClusterBinding} from "./projections/tenant_cluster_binding_pb";
import {HumanReadableEvent} from "./audit/event_pb";
import {UserOverview} from "./audit/user_pb";

/**
 * User is a service to query Users.
 *
 * @generated from service domain.User
 */
export const User = {
    typeName: "domain.User",
    methods: {
        /**
         * GetAll returns all users.
         *
         * @generated from rpc domain.User.GetAll
         */
        getAll: {
            name: "GetAll",
            I: GetAllRequest,
            O: UserProjection,
            kind: MethodKind.ServerStreaming,
        },
        /**
         * GetById returns the user found by the given id.
         *
         * @generated from rpc domain.User.GetById
         */
        getById: {
            name: "GetById",
            I: StringValue,
            O: UserProjection,
            kind: MethodKind.Unary,
        },
        /**
         * GetByEmail returns the user found by the given email address.
         *
         * @generated from rpc domain.User.GetByEmail
         */
        getByEmail: {
            name: "GetByEmail",
            I: StringValue,
            O: UserProjection,
            kind: MethodKind.Unary,
        },
        /**
         * GetRoleBindingsById returns all role bindings related to the given user id.
         *
         * @generated from rpc domain.User.GetRoleBindingsById
         */
        getRoleBindingsById: {
            name: "GetRoleBindingsById",
            I: StringValue,
            O: UserRoleBinding,
            kind: MethodKind.ServerStreaming,
        },
        /**
         * GetCount returns the count of users
         *
         * @generated from rpc domain.User.GetCount
         */
        getCount: {
            name: "GetCount",
            I: GetCountRequest,
            O: GetCountResult,
            kind: MethodKind.Unary,
        },
    }
} as const;

/**
 * Tenant is a service to query Tenants.
 *
 * @generated from service domain.Tenant
 */
export const Tenant = {
    typeName: "domain.Tenant",
    methods: {
        /**
         * GetAll returns all tenants.
         *
         * @generated from rpc domain.Tenant.GetAll
         */
        getAll: {
            name: "GetAll",
            I: GetAllRequest,
            O: TenantProjection,
            kind: MethodKind.ServerStreaming,
        },
        /**
         * GetById returns the tenant found by the given id.
         *
         * @generated from rpc domain.Tenant.GetById
         */
        getById: {
            name: "GetById",
            I: StringValue,
            O: TenantProjection,
            kind: MethodKind.Unary,
        },
        /**
         * GetByName returns the tenant found by the given name
         *
         * @generated from rpc domain.Tenant.GetByName
         */
        getByName: {
            name: "GetByName",
            I: StringValue,
            O: TenantProjection,
            kind: MethodKind.Unary,
        },
        /**
         * GetUsers returns users belonging to the given tenant id.
         *
         * @generated from rpc domain.Tenant.GetUsers
         */
        getUsers: {
            name: "GetUsers",
            I: StringValue,
            O: TenantUser,
            kind: MethodKind.ServerStreaming,
        },
    }
} as const;

/**
 * Cluster is a service to query information about known clusters.
 *
 * @generated from service domain.Cluster
 */
export const Cluster = {
    typeName: "domain.Cluster",
    methods: {
        /**
         * GetAll returns all known clusters
         *
         * @generated from rpc domain.Cluster.GetAll
         */
        getAll: {
            name: "GetAll",
            I: GetAllRequest,
            O: ClusterProjection,
            kind: MethodKind.ServerStreaming,
        },
        /**
         * GetById returns a cluster by its UUID
         *
         * @generated from rpc domain.Cluster.GetById
         */
        getById: {
            name: "GetById",
            I: StringValue,
            O: ClusterProjection,
            kind: MethodKind.Unary,
        },
        /**
         * GetByName returns a cluster by its name
         *
         * @generated from rpc domain.Cluster.GetByName
         */
        getByName: {
            name: "GetByName",
            I: StringValue,
            O: ClusterProjection,
            kind: MethodKind.Unary,
        },
    }
} as const;

/**
 * ClusterAccess is a service to query access information about clusters.
 *
 * @generated from service domain.ClusterAccess
 */
export const ClusterAccess = {
    typeName: "domain.ClusterAccess",
    methods: {
        /**
         * GetClusterAccess returns clusters which the given user has access
         * to by it's UUID
         *
         * @generated from rpc domain.ClusterAccess.GetClusterAccess
         * @deprecated
         */
        getClusterAccess: {
            name: "GetClusterAccess",
            I: Empty,
            O: ClusterAccessProjection,
            kind: MethodKind.ServerStreaming,
        },
        /**
         * GetClusterAccessV2 returns clusters which the given user has access
         * to by it's UUID
         *
         * @generated from rpc domain.ClusterAccess.GetClusterAccessV2
         */
        getClusterAccessV2: {
            name: "GetClusterAccessV2",
            I: Empty,
            O: ClusterAccessV2,
            kind: MethodKind.ServerStreaming,
        },
        /**
         * GetTenantClusterMappingsByTenantId returns bindings which belong to the
         * given tenant by it's UUID
         *
         * @generated from rpc domain.ClusterAccess.GetTenantClusterMappingsByTenantId
         */
        getTenantClusterMappingsByTenantId: {
            name: "GetTenantClusterMappingsByTenantId",
            I: StringValue,
            O: TenantClusterBinding,
            kind: MethodKind.ServerStreaming,
        },
        /**
         * GetTenantClusterMappingsByClusterId returns bindings which belong to the
         * given cluster by it's UUID
         *
         * @generated from rpc domain.ClusterAccess.GetTenantClusterMappingsByClusterId
         */
        getTenantClusterMappingsByClusterId: {
            name: "GetTenantClusterMappingsByClusterId",
            I: StringValue,
            O: TenantClusterBinding,
            kind: MethodKind.ServerStreaming,
        },
        /**
         * GetTenantClusterMappingsByClusterId returns the binding which belongs to
         * the given tenant and cluster by their UUIDs
         *
         * @generated from rpc domain.ClusterAccess.GetTenantClusterMappingByTenantAndClusterId
         */
        getTenantClusterMappingByTenantAndClusterId: {
            name: "GetTenantClusterMappingByTenantAndClusterId",
            I: GetClusterMappingRequest,
            O: TenantClusterBinding,
            kind: MethodKind.Unary,
        },
    }
} as const;

/**
 * @generated from service domain.AuditLog
 */
export const AuditLog = {
    typeName: "domain.AuditLog",
    methods: {
        /**
         * GetByDateRange returns human-readable events within the specified date
         * range
         *
         * @generated from rpc domain.AuditLog.GetByDateRange
         */
        getByDateRange: {
            name: "GetByDateRange",
            I: GetAuditLogByDateRangeRequest,
            O: HumanReadableEvent,
            kind: MethodKind.ServerStreaming,
        },
        /**
         * GetByUser returns human-readable events caused by others actions on the
         * given user
         *
         * @generated from rpc domain.AuditLog.GetByUser
         */
        getByUser: {
            name: "GetByUser",
            I: GetByUserRequest,
            O: HumanReadableEvent,
            kind: MethodKind.ServerStreaming,
        },
        /**
         * GetUserActions returns human-readable events caused by the given user
         * actions
         *
         * @generated from rpc domain.AuditLog.GetUserActions
         */
        getUserActions: {
            name: "GetUserActions",
            I: GetUserActionsRequest,
            O: HumanReadableEvent,
            kind: MethodKind.ServerStreaming,
        },
        /**
         * GetUsersOverview returns users overview at the specified timestamp,
         * tenants/clusters they belong to, and their roles
         *
         * @generated from rpc domain.AuditLog.GetUsersOverview
         */
        getUsersOverview: {
            name: "GetUsersOverview",
            I: GetUsersOverviewRequest,
            O: UserOverview,
            kind: MethodKind.ServerStreaming,
        },
    }
} as const;

/**
 * K8sAuthZ is the service
 *
 * @generated from service domain.K8sAuthZ
 */
export const K8sAuthZ = {
    typeName: "domain.K8sAuthZ",
    methods: {
        /**
         * GetAll returns all K8s resources for all clusters
         *
         * @generated from rpc domain.K8sAuthZ.GetAll
         */
        getAll: {
            name: "GetAll",
            I: Empty,
            O: BytesValue,
            kind: MethodKind.ServerStreaming,
        },
        /**
         * GetByClusterId returns all resources related to the given cluster
         *
         * @generated from rpc domain.K8sAuthZ.GetByClusterId
         */
        getByClusterId: {
            name: "GetByClusterId",
            I: StringValue,
            O: BytesValue,
            kind: MethodKind.ServerStreaming,
        },
    }
} as const;

