// Copyright 2022 Monoskope Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// @generated by protoc-gen-es v1.0.0 with parameter "target=ts"
// @generated from file api/domain/projections/user.proto (package projections, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";
import { LifecycleMetadata } from "./metadata_pb.js";
import { UserSource } from "../common/messages_pb.js";

/**
 * User within Monoskope
 *
 * @generated from message projections.User
 */
export class User extends Message<User> {
  /**
   * Unique identifier of the user (UUID 128-bit number)
   *
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * Name of the user
   *
   * @generated from field: string name = 2;
   */
  name = "";

  /**
   * Email address of the user
   *
   * @generated from field: string email = 3;
   */
  email = "";

  /**
   * Roles of the user
   *
   * @generated from field: repeated projections.UserRoleBinding roles = 4;
   */
  roles: UserRoleBinding[] = [];

  /**
   * Metadata about the projection
   *
   * @generated from field: projections.LifecycleMetadata metadata = 5;
   */
  metadata?: LifecycleMetadata;

  /**
   * Source the user originates from, e.g. "monoskope"
   *
   * @generated from field: common.UserSource source = 6;
   */
  source = UserSource.INTERNAL;

  constructor(data?: PartialMessage<User>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "projections.User";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "email", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "roles", kind: "message", T: UserRoleBinding, repeated: true },
    { no: 5, name: "metadata", kind: "message", T: LifecycleMetadata },
    { no: 6, name: "source", kind: "enum", T: proto3.getEnumType(UserSource) },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): User {
    return new User().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): User {
    return new User().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): User {
    return new User().fromJsonString(jsonString, options);
  }

  static equals(a: User | PlainMessage<User> | undefined, b: User | PlainMessage<User> | undefined): boolean {
    return proto3.util.equals(User, a, b);
  }
}

/**
 * @generated from message projections.UserRoleBinding
 */
export class UserRoleBinding extends Message<UserRoleBinding> {
  /**
   * Unique identifier of the user role binding (UUID 128-bit number)
   *
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * Unique identifier of the user (UUID 128-bit number)
   *
   * @generated from field: string user_id = 2;
   */
  userId = "";

  /**
   * Name of the role
   *
   * @generated from field: string role = 3;
   */
  role = "";

  /**
   * Scope of the role
   *
   * @generated from field: string scope = 4;
   */
  scope = "";

  /**
   * Target resource of the role
   *
   * @generated from field: string resource = 5;
   */
  resource = "";

  /**
   * Metadata about the projection
   *
   * @generated from field: projections.LifecycleMetadata metadata = 6;
   */
  metadata?: LifecycleMetadata;

  constructor(data?: PartialMessage<UserRoleBinding>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "projections.UserRoleBinding";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "user_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "role", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "scope", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "resource", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "metadata", kind: "message", T: LifecycleMetadata },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UserRoleBinding {
    return new UserRoleBinding().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UserRoleBinding {
    return new UserRoleBinding().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UserRoleBinding {
    return new UserRoleBinding().fromJsonString(jsonString, options);
  }

  static equals(a: UserRoleBinding | PlainMessage<UserRoleBinding> | undefined, b: UserRoleBinding | PlainMessage<UserRoleBinding> | undefined): boolean {
    return proto3.util.equals(UserRoleBinding, a, b);
  }
}

