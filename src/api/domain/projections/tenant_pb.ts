// Copyright 2022 Monoskope Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// @generated by protoc-gen-es v1.0.0 with parameter "target=ts"
// @generated from file api/domain/projections/tenant.proto (package projections, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";
import { LifecycleMetadata } from "./metadata_pb.js";

/**
 * Tenant within Monoskope
 *
 * @generated from message projections.Tenant
 */
export class Tenant extends Message<Tenant> {
  /**
   * Unique identifier of the tenant (UUID 128-bit number)
   *
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * Name of the tenant
   *
   * @generated from field: string name = 2;
   */
  name = "";

  /**
   * Prefix for namespaces and other resources related to the tenant.
   * DNS compatibility is ensured on validation. E.g. no more than 12
   * characters.
   *
   * @generated from field: string prefix = 3;
   */
  prefix = "";

  /**
   * Metadata about the projection
   *
   * @generated from field: projections.LifecycleMetadata metadata = 4;
   */
  metadata?: LifecycleMetadata;

  constructor(data?: PartialMessage<Tenant>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "projections.Tenant";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "prefix", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "metadata", kind: "message", T: LifecycleMetadata },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Tenant {
    return new Tenant().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Tenant {
    return new Tenant().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Tenant {
    return new Tenant().fromJsonString(jsonString, options);
  }

  static equals(a: Tenant | PlainMessage<Tenant> | undefined, b: Tenant | PlainMessage<Tenant> | undefined): boolean {
    return proto3.util.equals(Tenant, a, b);
  }
}

/**
 * User of a Tenant
 *
 * @generated from message projections.TenantUser
 */
export class TenantUser extends Message<TenantUser> {
  /**
   * Unique identifier of the user (UUID 128-bit number)
   *
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * Name of the user
   *
   * @generated from field: string name = 2;
   */
  name = "";

  /**
   * Email address of the user
   *
   * @generated from field: string email = 3;
   */
  email = "";

  /**
   * Roles of the user within the tenant
   *
   * @generated from field: repeated string tenant_roles = 4;
   */
  tenantRoles: string[] = [];

  /**
   * Unique identifier of the tenant (UUID 128-bit number)
   *
   * @generated from field: string tenant_id = 5;
   */
  tenantId = "";

  /**
   * Metadata about the projection
   *
   * @generated from field: projections.LifecycleMetadata metadata = 6;
   */
  metadata?: LifecycleMetadata;

  constructor(data?: PartialMessage<TenantUser>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "projections.TenantUser";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "email", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "tenant_roles", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 5, name: "tenant_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "metadata", kind: "message", T: LifecycleMetadata },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TenantUser {
    return new TenantUser().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TenantUser {
    return new TenantUser().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TenantUser {
    return new TenantUser().fromJsonString(jsonString, options);
  }

  static equals(a: TenantUser | PlainMessage<TenantUser> | undefined, b: TenantUser | PlainMessage<TenantUser> | undefined): boolean {
    return proto3.util.equals(TenantUser, a, b);
  }
}

