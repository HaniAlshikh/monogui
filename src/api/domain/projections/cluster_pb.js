// source: api/domain/projections/cluster.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global =
    (typeof globalThis !== 'undefined' && globalThis) ||
    (typeof window !== 'undefined' && window) ||
    (typeof global !== 'undefined' && global) ||
    (typeof self !== 'undefined' && self) ||
    (function () { return this; }).call(null) ||
    Function('return this')();

var api_domain_projections_metadata_pb = require('../../../api/domain/projections/metadata_pb.js');
goog.object.extend(proto, api_domain_projections_metadata_pb);
goog.exportSymbol('proto.projections.Cluster', null, global);
goog.exportSymbol('proto.projections.ClusterAccess', null, global);
goog.exportSymbol('proto.projections.ClusterAccessV2', null, global);
goog.exportSymbol('proto.projections.ClusterRole', null, global);
goog.exportSymbol('proto.projections.ClusterRole.ClusterRoleScope', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.projections.Cluster = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.projections.Cluster, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.projections.Cluster.displayName = 'proto.projections.Cluster';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.projections.ClusterAccess = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.projections.ClusterAccess.repeatedFields_, null);
};
goog.inherits(proto.projections.ClusterAccess, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.projections.ClusterAccess.displayName = 'proto.projections.ClusterAccess';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.projections.ClusterAccessV2 = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.projections.ClusterAccessV2.repeatedFields_, null);
};
goog.inherits(proto.projections.ClusterAccessV2, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.projections.ClusterAccessV2.displayName = 'proto.projections.ClusterAccessV2';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.projections.ClusterRole = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.projections.ClusterRole, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.projections.ClusterRole.displayName = 'proto.projections.ClusterRole';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.projections.Cluster.prototype.toObject = function(opt_includeInstance) {
  return proto.projections.Cluster.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.projections.Cluster} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.projections.Cluster.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, ""),
    name: jspb.Message.getFieldWithDefault(msg, 2, ""),
    apiServerAddress: jspb.Message.getFieldWithDefault(msg, 3, ""),
    caCertBundle: msg.getCaCertBundle_asB64(),
    metadata: (f = msg.getMetadata()) && api_domain_projections_metadata_pb.LifecycleMetadata.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.projections.Cluster}
 */
proto.projections.Cluster.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.projections.Cluster;
  return proto.projections.Cluster.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.projections.Cluster} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.projections.Cluster}
 */
proto.projections.Cluster.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setApiServerAddress(value);
      break;
    case 4:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setCaCertBundle(value);
      break;
    case 5:
      var value = new api_domain_projections_metadata_pb.LifecycleMetadata;
      reader.readMessage(value,api_domain_projections_metadata_pb.LifecycleMetadata.deserializeBinaryFromReader);
      msg.setMetadata(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.projections.Cluster.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.projections.Cluster.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.projections.Cluster} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.projections.Cluster.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getApiServerAddress();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getCaCertBundle_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      4,
      f
    );
  }
  f = message.getMetadata();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      api_domain_projections_metadata_pb.LifecycleMetadata.serializeBinaryToWriter
    );
  }
};


/**
 * optional string id = 1;
 * @return {string}
 */
proto.projections.Cluster.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.projections.Cluster} returns this
 */
proto.projections.Cluster.prototype.setId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string name = 2;
 * @return {string}
 */
proto.projections.Cluster.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.projections.Cluster} returns this
 */
proto.projections.Cluster.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string api_server_address = 3;
 * @return {string}
 */
proto.projections.Cluster.prototype.getApiServerAddress = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.projections.Cluster} returns this
 */
proto.projections.Cluster.prototype.setApiServerAddress = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional bytes ca_cert_bundle = 4;
 * @return {string}
 */
proto.projections.Cluster.prototype.getCaCertBundle = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * optional bytes ca_cert_bundle = 4;
 * This is a type-conversion wrapper around `getCaCertBundle()`
 * @return {string}
 */
proto.projections.Cluster.prototype.getCaCertBundle_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getCaCertBundle()));
};


/**
 * optional bytes ca_cert_bundle = 4;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getCaCertBundle()`
 * @return {!Uint8Array}
 */
proto.projections.Cluster.prototype.getCaCertBundle_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getCaCertBundle()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.projections.Cluster} returns this
 */
proto.projections.Cluster.prototype.setCaCertBundle = function(value) {
  return jspb.Message.setProto3BytesField(this, 4, value);
};


/**
 * optional LifecycleMetadata metadata = 5;
 * @return {?proto.projections.LifecycleMetadata}
 */
proto.projections.Cluster.prototype.getMetadata = function() {
  return /** @type{?proto.projections.LifecycleMetadata} */ (
    jspb.Message.getWrapperField(this, api_domain_projections_metadata_pb.LifecycleMetadata, 5));
};


/**
 * @param {?proto.projections.LifecycleMetadata|undefined} value
 * @return {!proto.projections.Cluster} returns this
*/
proto.projections.Cluster.prototype.setMetadata = function(value) {
  return jspb.Message.setWrapperField(this, 5, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.projections.Cluster} returns this
 */
proto.projections.Cluster.prototype.clearMetadata = function() {
  return this.setMetadata(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.projections.Cluster.prototype.hasMetadata = function() {
  return jspb.Message.getField(this, 5) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.projections.ClusterAccess.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.projections.ClusterAccess.prototype.toObject = function(opt_includeInstance) {
  return proto.projections.ClusterAccess.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.projections.ClusterAccess} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.projections.ClusterAccess.toObject = function(includeInstance, msg) {
  var f, obj = {
    cluster: (f = msg.getCluster()) && proto.projections.Cluster.toObject(includeInstance, f),
    rolesList: (f = jspb.Message.getRepeatedField(msg, 2)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.projections.ClusterAccess}
 */
proto.projections.ClusterAccess.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.projections.ClusterAccess;
  return proto.projections.ClusterAccess.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.projections.ClusterAccess} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.projections.ClusterAccess}
 */
proto.projections.ClusterAccess.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.projections.Cluster;
      reader.readMessage(value,proto.projections.Cluster.deserializeBinaryFromReader);
      msg.setCluster(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.addRoles(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.projections.ClusterAccess.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.projections.ClusterAccess.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.projections.ClusterAccess} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.projections.ClusterAccess.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCluster();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.projections.Cluster.serializeBinaryToWriter
    );
  }
  f = message.getRolesList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      2,
      f
    );
  }
};


/**
 * optional Cluster cluster = 1;
 * @return {?proto.projections.Cluster}
 */
proto.projections.ClusterAccess.prototype.getCluster = function() {
  return /** @type{?proto.projections.Cluster} */ (
    jspb.Message.getWrapperField(this, proto.projections.Cluster, 1));
};


/**
 * @param {?proto.projections.Cluster|undefined} value
 * @return {!proto.projections.ClusterAccess} returns this
*/
proto.projections.ClusterAccess.prototype.setCluster = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.projections.ClusterAccess} returns this
 */
proto.projections.ClusterAccess.prototype.clearCluster = function() {
  return this.setCluster(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.projections.ClusterAccess.prototype.hasCluster = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * repeated string roles = 2;
 * @return {!Array<string>}
 */
proto.projections.ClusterAccess.prototype.getRolesList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 2));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.projections.ClusterAccess} returns this
 */
proto.projections.ClusterAccess.prototype.setRolesList = function(value) {
  return jspb.Message.setField(this, 2, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.projections.ClusterAccess} returns this
 */
proto.projections.ClusterAccess.prototype.addRoles = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 2, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.projections.ClusterAccess} returns this
 */
proto.projections.ClusterAccess.prototype.clearRolesList = function() {
  return this.setRolesList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.projections.ClusterAccessV2.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.projections.ClusterAccessV2.prototype.toObject = function(opt_includeInstance) {
  return proto.projections.ClusterAccessV2.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.projections.ClusterAccessV2} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.projections.ClusterAccessV2.toObject = function(includeInstance, msg) {
  var f, obj = {
    cluster: (f = msg.getCluster()) && proto.projections.Cluster.toObject(includeInstance, f),
    clusterrolesList: jspb.Message.toObjectList(msg.getClusterrolesList(),
    proto.projections.ClusterRole.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.projections.ClusterAccessV2}
 */
proto.projections.ClusterAccessV2.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.projections.ClusterAccessV2;
  return proto.projections.ClusterAccessV2.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.projections.ClusterAccessV2} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.projections.ClusterAccessV2}
 */
proto.projections.ClusterAccessV2.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.projections.Cluster;
      reader.readMessage(value,proto.projections.Cluster.deserializeBinaryFromReader);
      msg.setCluster(value);
      break;
    case 2:
      var value = new proto.projections.ClusterRole;
      reader.readMessage(value,proto.projections.ClusterRole.deserializeBinaryFromReader);
      msg.addClusterroles(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.projections.ClusterAccessV2.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.projections.ClusterAccessV2.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.projections.ClusterAccessV2} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.projections.ClusterAccessV2.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCluster();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.projections.Cluster.serializeBinaryToWriter
    );
  }
  f = message.getClusterrolesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.projections.ClusterRole.serializeBinaryToWriter
    );
  }
};


/**
 * optional Cluster cluster = 1;
 * @return {?proto.projections.Cluster}
 */
proto.projections.ClusterAccessV2.prototype.getCluster = function() {
  return /** @type{?proto.projections.Cluster} */ (
    jspb.Message.getWrapperField(this, proto.projections.Cluster, 1));
};


/**
 * @param {?proto.projections.Cluster|undefined} value
 * @return {!proto.projections.ClusterAccessV2} returns this
*/
proto.projections.ClusterAccessV2.prototype.setCluster = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.projections.ClusterAccessV2} returns this
 */
proto.projections.ClusterAccessV2.prototype.clearCluster = function() {
  return this.setCluster(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.projections.ClusterAccessV2.prototype.hasCluster = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * repeated ClusterRole clusterRoles = 2;
 * @return {!Array<!proto.projections.ClusterRole>}
 */
proto.projections.ClusterAccessV2.prototype.getClusterrolesList = function() {
  return /** @type{!Array<!proto.projections.ClusterRole>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.projections.ClusterRole, 2));
};


/**
 * @param {!Array<!proto.projections.ClusterRole>} value
 * @return {!proto.projections.ClusterAccessV2} returns this
*/
proto.projections.ClusterAccessV2.prototype.setClusterrolesList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.projections.ClusterRole=} opt_value
 * @param {number=} opt_index
 * @return {!proto.projections.ClusterRole}
 */
proto.projections.ClusterAccessV2.prototype.addClusterroles = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.projections.ClusterRole, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.projections.ClusterAccessV2} returns this
 */
proto.projections.ClusterAccessV2.prototype.clearClusterrolesList = function() {
  return this.setClusterrolesList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.projections.ClusterRole.prototype.toObject = function(opt_includeInstance) {
  return proto.projections.ClusterRole.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.projections.ClusterRole} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.projections.ClusterRole.toObject = function(includeInstance, msg) {
  var f, obj = {
    scope: jspb.Message.getFieldWithDefault(msg, 1, 0),
    role: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.projections.ClusterRole}
 */
proto.projections.ClusterRole.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.projections.ClusterRole;
  return proto.projections.ClusterRole.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.projections.ClusterRole} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.projections.ClusterRole}
 */
proto.projections.ClusterRole.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.projections.ClusterRole.ClusterRoleScope} */ (reader.readEnum());
      msg.setScope(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setRole(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.projections.ClusterRole.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.projections.ClusterRole.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.projections.ClusterRole} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.projections.ClusterRole.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getScope();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getRole();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.projections.ClusterRole.ClusterRoleScope = {
  CLUSTER: 0,
  TENANT: 1
};

/**
 * optional ClusterRoleScope scope = 1;
 * @return {!proto.projections.ClusterRole.ClusterRoleScope}
 */
proto.projections.ClusterRole.prototype.getScope = function() {
  return /** @type {!proto.projections.ClusterRole.ClusterRoleScope} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.projections.ClusterRole.ClusterRoleScope} value
 * @return {!proto.projections.ClusterRole} returns this
 */
proto.projections.ClusterRole.prototype.setScope = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional string role = 2;
 * @return {string}
 */
proto.projections.ClusterRole.prototype.getRole = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.projections.ClusterRole} returns this
 */
proto.projections.ClusterRole.prototype.setRole = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


goog.object.extend(exports, proto.projections);
