// Copyright 2022 Monoskope Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// @generated by protoc-gen-es v1.0.0 with parameter "target=ts"
// @generated from file api/domain/projections/tenant_cluster_binding.proto (package projections, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";
import { LifecycleMetadata } from "./metadata_pb.js";

/**
 * TenantClusterBinding represents which tenant has access to what cluster
 *
 * @generated from message projections.TenantClusterBinding
 */
export class TenantClusterBinding extends Message<TenantClusterBinding> {
  /**
   * Unique identifier of the binding (UUID 128-bit number)
   *
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * Unique identifier of the cluster (UUID 128-bit number)
   *
   * @generated from field: string cluster_id = 2;
   */
  clusterId = "";

  /**
   * Unique identifier of the tenant (UUID 128-bit number)
   *
   * @generated from field: string tenant_id = 3;
   */
  tenantId = "";

  /**
   * Metadata about the projection
   *
   * @generated from field: projections.LifecycleMetadata metadata = 4;
   */
  metadata?: LifecycleMetadata;

  constructor(data?: PartialMessage<TenantClusterBinding>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "projections.TenantClusterBinding";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "cluster_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "tenant_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "metadata", kind: "message", T: LifecycleMetadata },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TenantClusterBinding {
    return new TenantClusterBinding().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TenantClusterBinding {
    return new TenantClusterBinding().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TenantClusterBinding {
    return new TenantClusterBinding().fromJsonString(jsonString, options);
  }

  static equals(a: TenantClusterBinding | PlainMessage<TenantClusterBinding> | undefined, b: TenantClusterBinding | PlainMessage<TenantClusterBinding> | undefined): boolean {
    return proto3.util.equals(TenantClusterBinding, a, b);
  }
}

