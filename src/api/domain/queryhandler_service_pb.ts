// Copyright 2022 Monoskope Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// @generated by protoc-gen-es v1.0.0 with parameter "target=ts"
// @generated from file api/domain/queryhandler_service.proto (package domain, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3, protoInt64, StringValue, Timestamp } from "@bufbuild/protobuf";

/**
 * GetAllRequest is the generic request to query all instances of a certain
 * projection
 *
 * @generated from message domain.GetAllRequest
 */
export class GetAllRequest extends Message<GetAllRequest> {
  /**
   * @generated from field: bool include_deleted = 1;
   */
  includeDeleted = false;

  constructor(data?: PartialMessage<GetAllRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "domain.GetAllRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "include_deleted", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetAllRequest {
    return new GetAllRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetAllRequest {
    return new GetAllRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetAllRequest {
    return new GetAllRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetAllRequest | PlainMessage<GetAllRequest> | undefined, b: GetAllRequest | PlainMessage<GetAllRequest> | undefined): boolean {
    return proto3.util.equals(GetAllRequest, a, b);
  }
}

/**
 * @generated from message domain.GetClusterMappingRequest
 */
export class GetClusterMappingRequest extends Message<GetClusterMappingRequest> {
  /**
   * @generated from field: string tenant_id = 1;
   */
  tenantId = "";

  /**
   * @generated from field: string cluster_id = 2;
   */
  clusterId = "";

  constructor(data?: PartialMessage<GetClusterMappingRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "domain.GetClusterMappingRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "tenant_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "cluster_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetClusterMappingRequest {
    return new GetClusterMappingRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetClusterMappingRequest {
    return new GetClusterMappingRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetClusterMappingRequest {
    return new GetClusterMappingRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetClusterMappingRequest | PlainMessage<GetClusterMappingRequest> | undefined, b: GetClusterMappingRequest | PlainMessage<GetClusterMappingRequest> | undefined): boolean {
    return proto3.util.equals(GetClusterMappingRequest, a, b);
  }
}

/**
 * @generated from message domain.GetCountRequest
 */
export class GetCountRequest extends Message<GetCountRequest> {
  /**
   * @generated from field: bool include_deleted = 1;
   */
  includeDeleted = false;

  constructor(data?: PartialMessage<GetCountRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "domain.GetCountRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "include_deleted", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetCountRequest {
    return new GetCountRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetCountRequest {
    return new GetCountRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetCountRequest {
    return new GetCountRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetCountRequest | PlainMessage<GetCountRequest> | undefined, b: GetCountRequest | PlainMessage<GetCountRequest> | undefined): boolean {
    return proto3.util.equals(GetCountRequest, a, b);
  }
}

/**
 * @generated from message domain.GetCountResult
 */
export class GetCountResult extends Message<GetCountResult> {
  /**
   * @generated from field: int64 count = 1;
   */
  count = protoInt64.zero;

  constructor(data?: PartialMessage<GetCountResult>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "domain.GetCountResult";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "count", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetCountResult {
    return new GetCountResult().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetCountResult {
    return new GetCountResult().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetCountResult {
    return new GetCountResult().fromJsonString(jsonString, options);
  }

  static equals(a: GetCountResult | PlainMessage<GetCountResult> | undefined, b: GetCountResult | PlainMessage<GetCountResult> | undefined): boolean {
    return proto3.util.equals(GetCountResult, a, b);
  }
}

/**
 * @generated from message domain.GetAuditLogByDateRangeRequest
 */
export class GetAuditLogByDateRangeRequest extends Message<GetAuditLogByDateRangeRequest> {
  /**
   * @generated from field: google.protobuf.Timestamp min_timestamp = 1;
   */
  minTimestamp?: Timestamp;

  /**
   * @generated from field: google.protobuf.Timestamp max_timestamp = 2;
   */
  maxTimestamp?: Timestamp;

  constructor(data?: PartialMessage<GetAuditLogByDateRangeRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "domain.GetAuditLogByDateRangeRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "min_timestamp", kind: "message", T: Timestamp },
    { no: 2, name: "max_timestamp", kind: "message", T: Timestamp },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetAuditLogByDateRangeRequest {
    return new GetAuditLogByDateRangeRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetAuditLogByDateRangeRequest {
    return new GetAuditLogByDateRangeRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetAuditLogByDateRangeRequest {
    return new GetAuditLogByDateRangeRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetAuditLogByDateRangeRequest | PlainMessage<GetAuditLogByDateRangeRequest> | undefined, b: GetAuditLogByDateRangeRequest | PlainMessage<GetAuditLogByDateRangeRequest> | undefined): boolean {
    return proto3.util.equals(GetAuditLogByDateRangeRequest, a, b);
  }
}

/**
 * @generated from message domain.GetByUserRequest
 */
export class GetByUserRequest extends Message<GetByUserRequest> {
  /**
   * @generated from field: google.protobuf.StringValue email = 1;
   */
  email?: string;

  /**
   * @generated from field: domain.GetAuditLogByDateRangeRequest date_range = 2;
   */
  dateRange?: GetAuditLogByDateRangeRequest;

  constructor(data?: PartialMessage<GetByUserRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "domain.GetByUserRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "email", kind: "message", T: StringValue },
    { no: 2, name: "date_range", kind: "message", T: GetAuditLogByDateRangeRequest },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetByUserRequest {
    return new GetByUserRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetByUserRequest {
    return new GetByUserRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetByUserRequest {
    return new GetByUserRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetByUserRequest | PlainMessage<GetByUserRequest> | undefined, b: GetByUserRequest | PlainMessage<GetByUserRequest> | undefined): boolean {
    return proto3.util.equals(GetByUserRequest, a, b);
  }
}

/**
 * @generated from message domain.GetUserActionsRequest
 */
export class GetUserActionsRequest extends Message<GetUserActionsRequest> {
  /**
   * @generated from field: google.protobuf.StringValue email = 1;
   */
  email?: string;

  /**
   * @generated from field: domain.GetAuditLogByDateRangeRequest date_range = 2;
   */
  dateRange?: GetAuditLogByDateRangeRequest;

  constructor(data?: PartialMessage<GetUserActionsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "domain.GetUserActionsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "email", kind: "message", T: StringValue },
    { no: 2, name: "date_range", kind: "message", T: GetAuditLogByDateRangeRequest },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetUserActionsRequest {
    return new GetUserActionsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetUserActionsRequest {
    return new GetUserActionsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetUserActionsRequest {
    return new GetUserActionsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetUserActionsRequest | PlainMessage<GetUserActionsRequest> | undefined, b: GetUserActionsRequest | PlainMessage<GetUserActionsRequest> | undefined): boolean {
    return proto3.util.equals(GetUserActionsRequest, a, b);
  }
}

/**
 * @generated from message domain.GetUsersOverviewRequest
 */
export class GetUsersOverviewRequest extends Message<GetUsersOverviewRequest> {
  /**
   * @generated from field: google.protobuf.Timestamp timestamp = 1;
   */
  timestamp?: Timestamp;

  constructor(data?: PartialMessage<GetUsersOverviewRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "domain.GetUsersOverviewRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "timestamp", kind: "message", T: Timestamp },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetUsersOverviewRequest {
    return new GetUsersOverviewRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetUsersOverviewRequest {
    return new GetUsersOverviewRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetUsersOverviewRequest {
    return new GetUsersOverviewRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetUsersOverviewRequest | PlainMessage<GetUsersOverviewRequest> | undefined, b: GetUsersOverviewRequest | PlainMessage<GetUsersOverviewRequest> | undefined): boolean {
    return proto3.util.equals(GetUsersOverviewRequest, a, b);
  }
}

