// Copyright 2022 Monoskope Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// @generated by protoc-gen-es v1.0.0 with parameter "target=ts"
// @generated from file api/domain/commanddata/user.proto (package commanddata, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3, StringValue } from "@bufbuild/protobuf";

/**
 * Command data to create a new user
 *
 * @generated from message commanddata.CreateUserCommandData
 */
export class CreateUserCommandData extends Message<CreateUserCommandData> {
  /**
   * Email address of the user
   *
   * @generated from field: string email = 1;
   */
  email = "";

  /**
   * Name of the user
   *
   * @generated from field: string name = 2;
   */
  name = "";

  constructor(data?: PartialMessage<CreateUserCommandData>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "commanddata.CreateUserCommandData";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "email", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreateUserCommandData {
    return new CreateUserCommandData().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreateUserCommandData {
    return new CreateUserCommandData().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreateUserCommandData {
    return new CreateUserCommandData().fromJsonString(jsonString, options);
  }

  static equals(a: CreateUserCommandData | PlainMessage<CreateUserCommandData> | undefined, b: CreateUserCommandData | PlainMessage<CreateUserCommandData> | undefined): boolean {
    return proto3.util.equals(CreateUserCommandData, a, b);
  }
}

/**
 * Command data to create a rolebinding for an user
 *
 * @generated from message commanddata.CreateUserRoleBindingCommandData
 */
export class CreateUserRoleBindingCommandData extends Message<CreateUserRoleBindingCommandData> {
  /**
   * Unique identifier of the user (UUID 128-bit number)
   *
   * @generated from field: string user_id = 1;
   */
  userId = "";

  /**
   * Name of the role to add
   *
   * @generated from field: string role = 2;
   */
  role = "";

  /**
   * Scope of the role
   *
   * @generated from field: string scope = 3;
   */
  scope = "";

  /**
   * Unique identifier of the affected resource within scope (UUID 128-bit
   * number)
   *
   * @generated from field: google.protobuf.StringValue resource = 4;
   */
  resource?: string;

  constructor(data?: PartialMessage<CreateUserRoleBindingCommandData>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "commanddata.CreateUserRoleBindingCommandData";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "user_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "role", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "scope", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "resource", kind: "message", T: StringValue },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreateUserRoleBindingCommandData {
    return new CreateUserRoleBindingCommandData().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreateUserRoleBindingCommandData {
    return new CreateUserRoleBindingCommandData().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreateUserRoleBindingCommandData {
    return new CreateUserRoleBindingCommandData().fromJsonString(jsonString, options);
  }

  static equals(a: CreateUserRoleBindingCommandData | PlainMessage<CreateUserRoleBindingCommandData> | undefined, b: CreateUserRoleBindingCommandData | PlainMessage<CreateUserRoleBindingCommandData> | undefined): boolean {
    return proto3.util.equals(CreateUserRoleBindingCommandData, a, b);
  }
}

/**
 * Command data to update a user
 *
 * @generated from message commanddata.UpdateUserCommandData
 */
export class UpdateUserCommandData extends Message<UpdateUserCommandData> {
  /**
   * New name of the user
   *
   * @generated from field: google.protobuf.StringValue name = 1;
   */
  name?: string;

  constructor(data?: PartialMessage<UpdateUserCommandData>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "commanddata.UpdateUserCommandData";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "message", T: StringValue },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UpdateUserCommandData {
    return new UpdateUserCommandData().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UpdateUserCommandData {
    return new UpdateUserCommandData().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UpdateUserCommandData {
    return new UpdateUserCommandData().fromJsonString(jsonString, options);
  }

  static equals(a: UpdateUserCommandData | PlainMessage<UpdateUserCommandData> | undefined, b: UpdateUserCommandData | PlainMessage<UpdateUserCommandData> | undefined): boolean {
    return proto3.util.equals(UpdateUserCommandData, a, b);
  }
}

