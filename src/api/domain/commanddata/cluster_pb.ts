// Copyright 2022 Monoskope Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// @generated by protoc-gen-es v1.0.0 with parameter "target=ts"
// @generated from file api/domain/commanddata/cluster.proto (package commanddata, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3, StringValue } from "@bufbuild/protobuf";

/**
 * Command data to create a new cluster
 *
 * @generated from message commanddata.CreateCluster
 */
export class CreateCluster extends Message<CreateCluster> {
  /**
   * Unique name of the cluster, to be utilized for generating unique labels
   * and symbols, e.g. with metrics.
   *
   * @generated from field: string name = 1;
   */
  name = "";

  /**
   * DNS name or IP address of the clusters KubeAPIServer
   *
   * @generated from field: string api_server_address = 2;
   */
  apiServerAddress = "";

  /**
   * Bundle of CA certificates of the cluster, PEM encoded
   *
   * @generated from field: bytes ca_cert_bundle = 3;
   */
  caCertBundle = new Uint8Array(0);

  constructor(data?: PartialMessage<CreateCluster>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "commanddata.CreateCluster";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "api_server_address", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "ca_cert_bundle", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreateCluster {
    return new CreateCluster().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreateCluster {
    return new CreateCluster().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreateCluster {
    return new CreateCluster().fromJsonString(jsonString, options);
  }

  static equals(a: CreateCluster | PlainMessage<CreateCluster> | undefined, b: CreateCluster | PlainMessage<CreateCluster> | undefined): boolean {
    return proto3.util.equals(CreateCluster, a, b);
  }
}

/**
 * Command data to update information about a cluster
 *
 * @generated from message commanddata.UpdateCluster
 */
export class UpdateCluster extends Message<UpdateCluster> {
  /**
   * Name of the cluster
   *
   * @generated from field: google.protobuf.StringValue name = 1;
   */
  name?: string;

  /**
   * DNS name or IP address of the clusters KubeAPIServer
   *
   * @generated from field: google.protobuf.StringValue api_server_address = 2;
   */
  apiServerAddress?: string;

  /**
   * Bundle of CA certificates of the cluster, PEM encoded
   *
   * @generated from field: bytes ca_cert_bundle = 3;
   */
  caCertBundle = new Uint8Array(0);

  constructor(data?: PartialMessage<UpdateCluster>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "commanddata.UpdateCluster";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "message", T: StringValue },
    { no: 2, name: "api_server_address", kind: "message", T: StringValue },
    { no: 3, name: "ca_cert_bundle", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UpdateCluster {
    return new UpdateCluster().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UpdateCluster {
    return new UpdateCluster().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UpdateCluster {
    return new UpdateCluster().fromJsonString(jsonString, options);
  }

  static equals(a: UpdateCluster | PlainMessage<UpdateCluster> | undefined, b: UpdateCluster | PlainMessage<UpdateCluster> | undefined): boolean {
    return proto3.util.equals(UpdateCluster, a, b);
  }
}

