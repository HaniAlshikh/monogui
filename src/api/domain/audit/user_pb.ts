// Copyright 2022 Monoskope Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// @generated by protoc-gen-es v1.0.0 with parameter "target=ts"
// @generated from file api/domain/audit/user.proto (package audit, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";

/**
 * human readable representation of a user for auditing
 *
 * @generated from message audit.UserOverview
 */
export class UserOverview extends Message<UserOverview> {
  /**
   * the name of the user
   *
   * @generated from field: string name = 1;
   */
  name = "";

  /**
   * the email of the user
   *
   * @generated from field: string email = 2;
   */
  email = "";

  /**
   * roles of the user in general
   *
   * @generated from field: string roles = 3;
   */
  roles = "";

  /**
   * tenants the user has access to including his role
   *
   * @generated from field: string tenants = 4;
   */
  tenants = "";

  /**
   * clusters the user has access to including his role
   *
   * @generated from field: string clusters = 5;
   */
  clusters = "";

  /**
   * human readable description of the user life-cycle
   *
   * @generated from field: string details = 6;
   */
  details = "";

  constructor(data?: PartialMessage<UserOverview>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "audit.UserOverview";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "email", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "roles", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "tenants", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "clusters", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "details", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UserOverview {
    return new UserOverview().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UserOverview {
    return new UserOverview().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UserOverview {
    return new UserOverview().fromJsonString(jsonString, options);
  }

  static equals(a: UserOverview | PlainMessage<UserOverview> | undefined, b: UserOverview | PlainMessage<UserOverview> | undefined): boolean {
    return proto3.util.equals(UserOverview, a, b);
  }
}

