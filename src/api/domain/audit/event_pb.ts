// Copyright 2022 Monoskope Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// @generated by protoc-gen-es v1.0.0 with parameter "target=ts"
// @generated from file api/domain/audit/event.proto (package audit, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3, Timestamp } from "@bufbuild/protobuf";

/**
 * human readable representation of an event for auditing
 *
 * @generated from message audit.HumanReadableEvent
 */
export class HumanReadableEvent extends Message<HumanReadableEvent> {
  /**
   * the timestamp when the event occurred
   *
   * @generated from field: google.protobuf.Timestamp timestamp = 1;
   */
  timestamp?: Timestamp;

  /**
   * issuer name of the event
   *
   * @generated from field: string issuer = 2;
   */
  issuer = "";

  /**
   * the uuid of the issuer
   *
   * @generated from field: string issuer_id = 3;
   */
  issuerId = "";

  /**
   * type of the event as defined in monoskope
   *
   * @generated from field: string event_type = 4;
   */
  eventType = "";

  /**
   * human readable description of what happens after the event is applied
   *
   * @generated from field: string details = 5;
   */
  details = "";

  constructor(data?: PartialMessage<HumanReadableEvent>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "audit.HumanReadableEvent";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "timestamp", kind: "message", T: Timestamp },
    { no: 2, name: "issuer", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "issuer_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "event_type", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "details", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): HumanReadableEvent {
    return new HumanReadableEvent().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): HumanReadableEvent {
    return new HumanReadableEvent().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): HumanReadableEvent {
    return new HumanReadableEvent().fromJsonString(jsonString, options);
  }

  static equals(a: HumanReadableEvent | PlainMessage<HumanReadableEvent> | undefined, b: HumanReadableEvent | PlainMessage<HumanReadableEvent> | undefined): boolean {
    return proto3.util.equals(HumanReadableEvent, a, b);
  }
}

