/**
 * @fileoverview gRPC-Web generated client stub for gateway
 * @enhanceable
 * @public
 */

// Code generated by protoc-gen-grpc-web. DO NOT EDIT.
// versions:
// 	protoc-gen-grpc-web v1.4.2
// 	protoc              v3.21.2
// source: api/gateway/service.proto


/* eslint-disable */
// @ts-nocheck



const grpc = {};
grpc.web = require('grpc-web');


var api_gateway_messages_pb = require('../../api/gateway/messages_pb.js')
const proto = {};
proto.gateway = require('./service_pb.js');

/**
 * @param {string} hostname
 * @param {?Object} credentials
 * @param {?grpc.web.ClientOptions} options
 * @constructor
 * @struct
 * @final
 */
proto.gateway.GatewayClient =
    function(hostname, credentials, options) {
  if (!options) options = {};
  options.format = 'text';

  /**
   * @private @const {!grpc.web.GrpcWebClientBase} The client
   */
  this.client_ = new grpc.web.GrpcWebClientBase(options);

  /**
   * @private @const {string} The hostname
   */
  this.hostname_ = hostname.replace(/\/+$/, '');

};


/**
 * @param {string} hostname
 * @param {?Object} credentials
 * @param {?grpc.web.ClientOptions} options
 * @constructor
 * @struct
 * @final
 */
proto.gateway.GatewayPromiseClient =
    function(hostname, credentials, options) {
  if (!options) options = {};
  options.format = 'text';

  /**
   * @private @const {!grpc.web.GrpcWebClientBase} The client
   */
  this.client_ = new grpc.web.GrpcWebClientBase(options);

  /**
   * @private @const {string} The hostname
   */
  this.hostname_ = hostname.replace(/\/+$/, '');

};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.gateway.UpstreamAuthenticationRequest,
 *   !proto.gateway.UpstreamAuthenticationResponse>}
 */
const methodDescriptor_Gateway_RequestUpstreamAuthentication = new grpc.web.MethodDescriptor(
  '/gateway.Gateway/RequestUpstreamAuthentication',
  grpc.web.MethodType.UNARY,
  api_gateway_messages_pb.UpstreamAuthenticationRequest,
  api_gateway_messages_pb.UpstreamAuthenticationResponse,
  /**
   * @param {!proto.gateway.UpstreamAuthenticationRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  api_gateway_messages_pb.UpstreamAuthenticationResponse.deserializeBinary
);


/**
 * @param {!proto.gateway.UpstreamAuthenticationRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.gateway.UpstreamAuthenticationResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.gateway.UpstreamAuthenticationResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.gateway.GatewayClient.prototype.requestUpstreamAuthentication =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/gateway.Gateway/RequestUpstreamAuthentication',
      request,
      metadata || {},
      methodDescriptor_Gateway_RequestUpstreamAuthentication,
      callback);
};


/**
 * @param {!proto.gateway.UpstreamAuthenticationRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.gateway.UpstreamAuthenticationResponse>}
 *     Promise that resolves to the response
 */
proto.gateway.GatewayPromiseClient.prototype.requestUpstreamAuthentication =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/gateway.Gateway/RequestUpstreamAuthentication',
      request,
      metadata || {},
      methodDescriptor_Gateway_RequestUpstreamAuthentication);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.gateway.AuthenticationRequest,
 *   !proto.gateway.AuthenticationResponse>}
 */
const methodDescriptor_Gateway_RequestAuthentication = new grpc.web.MethodDescriptor(
  '/gateway.Gateway/RequestAuthentication',
  grpc.web.MethodType.UNARY,
  api_gateway_messages_pb.AuthenticationRequest,
  api_gateway_messages_pb.AuthenticationResponse,
  /**
   * @param {!proto.gateway.AuthenticationRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  api_gateway_messages_pb.AuthenticationResponse.deserializeBinary
);


/**
 * @param {!proto.gateway.AuthenticationRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.gateway.AuthenticationResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.gateway.AuthenticationResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.gateway.GatewayClient.prototype.requestAuthentication =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/gateway.Gateway/RequestAuthentication',
      request,
      metadata || {},
      methodDescriptor_Gateway_RequestAuthentication,
      callback);
};


/**
 * @param {!proto.gateway.AuthenticationRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.gateway.AuthenticationResponse>}
 *     Promise that resolves to the response
 */
proto.gateway.GatewayPromiseClient.prototype.requestAuthentication =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/gateway.Gateway/RequestAuthentication',
      request,
      metadata || {},
      methodDescriptor_Gateway_RequestAuthentication);
};


/**
 * @param {string} hostname
 * @param {?Object} credentials
 * @param {?grpc.web.ClientOptions} options
 * @constructor
 * @struct
 * @final
 */
proto.gateway.GatewayAuthClient =
    function(hostname, credentials, options) {
  if (!options) options = {};
  options.format = 'text';

  /**
   * @private @const {!grpc.web.GrpcWebClientBase} The client
   */
  this.client_ = new grpc.web.GrpcWebClientBase(options);

  /**
   * @private @const {string} The hostname
   */
  this.hostname_ = hostname.replace(/\/+$/, '');

};


/**
 * @param {string} hostname
 * @param {?Object} credentials
 * @param {?grpc.web.ClientOptions} options
 * @constructor
 * @struct
 * @final
 */
proto.gateway.GatewayAuthPromiseClient =
    function(hostname, credentials, options) {
  if (!options) options = {};
  options.format = 'text';

  /**
   * @private @const {!grpc.web.GrpcWebClientBase} The client
   */
  this.client_ = new grpc.web.GrpcWebClientBase(options);

  /**
   * @private @const {string} The hostname
   */
  this.hostname_ = hostname.replace(/\/+$/, '');

};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.gateway.CheckRequest,
 *   !proto.gateway.CheckResponse>}
 */
const methodDescriptor_GatewayAuth_Check = new grpc.web.MethodDescriptor(
  '/gateway.GatewayAuth/Check',
  grpc.web.MethodType.UNARY,
  api_gateway_messages_pb.CheckRequest,
  api_gateway_messages_pb.CheckResponse,
  /**
   * @param {!proto.gateway.CheckRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  api_gateway_messages_pb.CheckResponse.deserializeBinary
);


/**
 * @param {!proto.gateway.CheckRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.gateway.CheckResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.gateway.CheckResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.gateway.GatewayAuthClient.prototype.check =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/gateway.GatewayAuth/Check',
      request,
      metadata || {},
      methodDescriptor_GatewayAuth_Check,
      callback);
};


/**
 * @param {!proto.gateway.CheckRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.gateway.CheckResponse>}
 *     Promise that resolves to the response
 */
proto.gateway.GatewayAuthPromiseClient.prototype.check =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/gateway.GatewayAuth/Check',
      request,
      metadata || {},
      methodDescriptor_GatewayAuth_Check);
};


/**
 * @param {string} hostname
 * @param {?Object} credentials
 * @param {?grpc.web.ClientOptions} options
 * @constructor
 * @struct
 * @final
 */
proto.gateway.ClusterAuthClient =
    function(hostname, credentials, options) {
  if (!options) options = {};
  options.format = 'text';

  /**
   * @private @const {!grpc.web.GrpcWebClientBase} The client
   */
  this.client_ = new grpc.web.GrpcWebClientBase(options);

  /**
   * @private @const {string} The hostname
   */
  this.hostname_ = hostname.replace(/\/+$/, '');

};


/**
 * @param {string} hostname
 * @param {?Object} credentials
 * @param {?grpc.web.ClientOptions} options
 * @constructor
 * @struct
 * @final
 */
proto.gateway.ClusterAuthPromiseClient =
    function(hostname, credentials, options) {
  if (!options) options = {};
  options.format = 'text';

  /**
   * @private @const {!grpc.web.GrpcWebClientBase} The client
   */
  this.client_ = new grpc.web.GrpcWebClientBase(options);

  /**
   * @private @const {string} The hostname
   */
  this.hostname_ = hostname.replace(/\/+$/, '');

};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.gateway.ClusterAuthTokenRequest,
 *   !proto.gateway.ClusterAuthTokenResponse>}
 */
const methodDescriptor_ClusterAuth_GetAuthToken = new grpc.web.MethodDescriptor(
  '/gateway.ClusterAuth/GetAuthToken',
  grpc.web.MethodType.UNARY,
  api_gateway_messages_pb.ClusterAuthTokenRequest,
  api_gateway_messages_pb.ClusterAuthTokenResponse,
  /**
   * @param {!proto.gateway.ClusterAuthTokenRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  api_gateway_messages_pb.ClusterAuthTokenResponse.deserializeBinary
);


/**
 * @param {!proto.gateway.ClusterAuthTokenRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.gateway.ClusterAuthTokenResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.gateway.ClusterAuthTokenResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.gateway.ClusterAuthClient.prototype.getAuthToken =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/gateway.ClusterAuth/GetAuthToken',
      request,
      metadata || {},
      methodDescriptor_ClusterAuth_GetAuthToken,
      callback);
};


/**
 * @param {!proto.gateway.ClusterAuthTokenRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.gateway.ClusterAuthTokenResponse>}
 *     Promise that resolves to the response
 */
proto.gateway.ClusterAuthPromiseClient.prototype.getAuthToken =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/gateway.ClusterAuth/GetAuthToken',
      request,
      metadata || {},
      methodDescriptor_ClusterAuth_GetAuthToken);
};


/**
 * @param {string} hostname
 * @param {?Object} credentials
 * @param {?grpc.web.ClientOptions} options
 * @constructor
 * @struct
 * @final
 */
proto.gateway.APITokenClient =
    function(hostname, credentials, options) {
  if (!options) options = {};
  options.format = 'text';

  /**
   * @private @const {!grpc.web.GrpcWebClientBase} The client
   */
  this.client_ = new grpc.web.GrpcWebClientBase(options);

  /**
   * @private @const {string} The hostname
   */
  this.hostname_ = hostname.replace(/\/+$/, '');

};


/**
 * @param {string} hostname
 * @param {?Object} credentials
 * @param {?grpc.web.ClientOptions} options
 * @constructor
 * @struct
 * @final
 */
proto.gateway.APITokenPromiseClient =
    function(hostname, credentials, options) {
  if (!options) options = {};
  options.format = 'text';

  /**
   * @private @const {!grpc.web.GrpcWebClientBase} The client
   */
  this.client_ = new grpc.web.GrpcWebClientBase(options);

  /**
   * @private @const {string} The hostname
   */
  this.hostname_ = hostname.replace(/\/+$/, '');

};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.gateway.APITokenRequest,
 *   !proto.gateway.APITokenResponse>}
 */
const methodDescriptor_APIToken_RequestAPIToken = new grpc.web.MethodDescriptor(
  '/gateway.APIToken/RequestAPIToken',
  grpc.web.MethodType.UNARY,
  api_gateway_messages_pb.APITokenRequest,
  api_gateway_messages_pb.APITokenResponse,
  /**
   * @param {!proto.gateway.APITokenRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  api_gateway_messages_pb.APITokenResponse.deserializeBinary
);


/**
 * @param {!proto.gateway.APITokenRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.gateway.APITokenResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.gateway.APITokenResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.gateway.APITokenClient.prototype.requestAPIToken =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/gateway.APIToken/RequestAPIToken',
      request,
      metadata || {},
      methodDescriptor_APIToken_RequestAPIToken,
      callback);
};


/**
 * @param {!proto.gateway.APITokenRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.gateway.APITokenResponse>}
 *     Promise that resolves to the response
 */
proto.gateway.APITokenPromiseClient.prototype.requestAPIToken =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/gateway.APIToken/RequestAPIToken',
      request,
      metadata || {},
      methodDescriptor_APIToken_RequestAPIToken);
};


module.exports = proto.gateway;

